/*************************************************************
 * This file is generated by the JACK Development Environment.
 * Saved at: Thu Feb 21 17:28:43 EST 2002
 * WARNING: DO NOT EDIT THIS OR YOUR CHANGES MAY BE LOST
 *************************************************************/


/* Documentation */

/**
   Contains the logic required to solve the problem of moving a disc
   from its current location to a given destination. In short, the
   problem is solved by partitioning the problem into four different
   subcases, whose solutions are represented by different plans:
 	a) the disc already is on its destination pin,
 	b) the disc is at the top on another pin, and the top disc on
	   the destination pin is smaller,
 	c) the disc is at the top on another pin, and the top disc on
	   the destination pin is larger,
 	d) the disc is on another pin but not at the top.
    A solution may recursively require the solution of a subproblem.
*/

public capability Solving extends Capability {
    #handles external event SolveDisc;
    #posts external event MoveDisc;
    #imports data Order order();
    #imports data Top top();
    #imports data Place place();
    #uses plan SolveZero;
    #uses plan SolveRight;
    #uses plan SolveTopMove;
    #uses plan SolveTop;
    #uses plan SolveMiddle;
    /**
           Nice formatting functions (used to print debugging info).
        */
    
    int depth = 0;
    // Solving for non-top disc on wrong pin
    /**
           Given two pins, compute the number of the third.
        */
    
    int thirdPin(int p1, int p2)
      {
        return ((3 - p1) - p2);
      }
    
    void indent(String s)
      {
        for (int i = 0;(i < depth);i++ )System.out.print(" ");System.out.println(s);
      }
    
    void entering(String p, SolveDisc ev)
      {
        depth++ ;
        indent((((((p + "(") + ev.disc) + ",") + ev.pin) + ")"));
      }
    
    void exiting(String p, SolveDisc ev)
      {
        indent((((((("<--" + p) + "(") + ev.disc) + ",") + ev.pin) + ")"));
        depth-- ;
      }
    

}

