/*************************************************************
 * This file is generated by the JACK Development Environment.
 * Saved at: Thu Feb 21 17:28:43 EST 2002
 * WARNING: DO NOT EDIT THIS OR YOUR CHANGES MAY BE LOST
 *************************************************************/


/* Documentation */

/**
   This plan solves how to move a disc to a given pin when the disc is
   at the top of a pin, but not the right pin.
*/

public plan SolveTop extends Plan {
    logical int pin;
    logical int disc;
    logical int deep;
    
    #handles event SolveDisc ev;

    static boolean
    relevant(SolveDisc ev)
    {
        return ev.movable;
    }    
    
    #posts event SolveDisc sd;
    #uses interface Solving env;
    #reads data Top top;
    #reads data Order order;

    context()
    {
        true && (((top.get(pin,ev.disc) && !pin.unify(ev.pin)) && top.get(ev.pin,disc)) && (disc.getValue() > ev.disc.getValue()));
    }

    #reasoning method
    body()
    {
        logical int pin3;
        pin3.unify(env.thirdPin(pin.getValue(),ev.pin.getValue()));
        deepest(disc,deep);
        @subtask(sd.solve(deep,pin3));
        @subtask(sd.solve(ev.disc,ev.pin));
    }
    

    #reasoning method
    deepest(logical int d,logical int deep)
    {
        logical int x;
        order.get(d,x);
        if ((x.getValue() < ev.disc.getValue())) {
            deep.unify(d);
        } else {
            deepest(x,deep);
        }
    }
}

