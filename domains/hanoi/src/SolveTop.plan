/*************************************************************
 * This file is generated by the JACK Development Environment.
 * Saved at: Thu Feb 21 17:28:43 EST 2002
 * WARNING: DO NOT EDIT THIS OR YOUR CHANGES MAY BE LOST
 *************************************************************/


/* Documentation */

/**
   This plan solves how to move a disc to a given pin when the disc is
   at the top of a pin, but not the right pin.
*/

public plan SolveTop extends Plan {

    public int pid = 3;

    logical int pin;
    logical int disc;
    logical int deep;
    
    #handles event SolveDisc ev;
    #uses interface Player ag;

    public PlanInstanceInfo getInstanceInfo(){
        return new PlanIdInfo(pid, 0.5);
    }

    static boolean
    relevant(SolveDisc ev)
    {
        return (ev.alwaysApplies || ev.movable);
    }    
    
    #posts event SolveDisc sd;
    #uses interface Solving env;
    #reads data Top top;
    #reads data Order order;

    context()
    {
        ev.alwaysApplies || (((top.get(pin,ev.disc) && !pin.unify(ev.pin)) && top.get(ev.pin,disc)) && (disc.getValue() > ev.disc.getValue()));
    }

    #reasoning method
    body()
    {
        if (((top.get(pin,ev.disc) && !pin.unify(ev.pin)) && top.get(ev.pin,disc)) && (disc.getValue() > ev.disc.getValue())) {
            logical int pin3;
            pin3.unify(env.thirdPin(pin.getValue(),ev.pin.getValue()));
            deepest(disc,deep);
            ag.log("Plan "+pid+" will first solve disc "+deep+" to pin "+pin3);
            ag.logIndentRight();
            @subtask(sd.solve(deep,pin3));
            ag.logIndentLeft();
            ag.log("Plan "+pid+" will now solve disc "+ev.disc+" to pin "+ev.pin);
            ag.logIndentRight();
            @subtask(sd.solve(ev.disc,ev.pin));
            ag.logIndentLeft();
        } else {
            false;
        }
    }
    

    #reasoning method
    deepest(logical int d,logical int deep)
    {
        logical int x;
        order.get(d,x);
        if ((x.getValue() < ev.disc.getValue())) {
            deep.unify(d);
        } else {
            deepest(x,deep);
        }
    }

    #reasoning method
    pass() {
        if (ag.learningMode) {
            ag.record(pid,true,ev.disc.as_int(),ev.pin.as_int());
        }
    }
    #reasoning method
    fail() {
        if (ag.learningMode) {
            ag.record(pid,false,ev.disc.as_int(),ev.pin.as_int());
        }
    }
}

