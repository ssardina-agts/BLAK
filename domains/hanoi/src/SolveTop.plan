/*************************************************************
 * This file is generated by the JACK Development Environment.
 * Saved at: Thu Feb 21 17:28:43 EST 2002
 * WARNING: DO NOT EDIT THIS OR YOUR CHANGES MAY BE LOST
 *************************************************************/


/* Documentation */

/**
   This plan solves how to move a disc to a given pin when the disc is
   at the top of a pin, but not the right pin.
*/

import agents.PlanNode;
import PlanIdInfo;

public plan SolveTop extends Plan {

    public int pid = 3;

    logical int pin;
    logical int disc;
    logical int deep;
    
    #handles event SolveDisc ev;
    #uses interface Player ag;

    public PlanInstanceInfo getInstanceInfo(){
        if (ag.learningMode) {
            PlanNode thisNode = ag.planNodes[pid];
            double coverage = thisNode.getCoverage(ev.state());
            if (thisNode.useDT(1/*Iteration: not used*/)){
                double[] ps = thisNode.getProbability(ev.state());
                return new PlanIdInfo(pid, ps[0], coverage, 1.0, false);
            } else{
                return new PlanIdInfo(pid, 0.5, coverage, 1.0, false);
            }
        } else {
            return new PlanIdInfo(pid, 0.5, 1.0, 1.0, false);
        }
    }

    static boolean
    relevant(SolveDisc ev)
    {
        return (ev.alwaysApplies || ev.movable);
    }    
    
    #posts event SolveDisc sd;
    #uses interface Solving env;
    #reads data Top top;
    #reads data Order order;
    #reads data Place place;

    context()
    {
        (ev.level < ag.maxRecursion) && (ev.alwaysApplies || (((top.get(pin,ev.disc) && !pin.unify(ev.pin)) && top.get(ev.pin,disc)) && (disc.getValue() > ev.disc.getValue())));
    }

    #reasoning method
    body()
    {
        @test(top.get(pin,ev.disc) && !pin.unify(ev.pin),null);
        top.get(pin,ev.disc);
        top.get(ev.pin,disc);
        logical int pin3;
        pin3.unify(env.thirdPin(pin.getValue(),ev.pin.getValue()));
        deepest(disc,deep);
        ag.writeLog("Plan "+pid+" will first solve disc "+deep+" to pin "+pin3);
        ag.indentRight();
        @subtask(sd.solve(deep,pin3,ev.level+1,top.get(0),top.get(1),top.get(2)));
        ag.indentLeft();
        ag.writeLog("Plan "+pid+" will now solve disc "+ev.disc+" to pin "+ev.pin);
        ag.indentRight();
        @subtask(sd.solve(ev.disc,ev.pin,ev.level+1,top.get(0),top.get(1),top.get(2)));
        ag.indentLeft();
        @test(place.get(ev.pin,ev.disc), null);
    }
    

    #reasoning method
    deepest(logical int d,logical int deep)
    {
        logical int x;
        order.get(d,x);
        if ((x.getValue() < ev.disc.getValue())) {
            deep.unify(d);
        } else {
            deepest(x,deep);
        }
    }

    #reasoning method
    pass() {
        if (ag.learningMode) {
            ag.planNodes[pid].setLastInstance(ev.state());
            ag.planNodes[pid].record(true);
        }
    }
    #reasoning method
    fail() {
        if (ag.learningMode) {
            ag.planNodes[pid].setLastInstance(ev.state());
            ag.planNodes[pid].record(false);
        }
    }
}

