/*************************************************************
 * This file is generated by the JACK Development Environment.
 * Saved at: Thu Feb 21 17:28:43 EST 2002
 * WARNING: DO NOT EDIT THIS OR YOUR CHANGES MAY BE LOST
 *************************************************************/


/* Documentation */

/**
   This plan solves moving a disc from the middle of a stack.
*/

import agents.PlanNode;
import PlanIdInfo;

public plan SolveMiddle extends Plan {

    public int pid = 2;

    logical int disc;
    #handles event SolveDisc ev;
    #uses interface Player ag;
    
    public PlanInstanceInfo getInstanceInfo(){
        return ag.planInfo(pid, ev.state(), ev.level);
    }

    static boolean
    relevant(SolveDisc ev)
    {
        return (ev.alwaysApplies || ev.movable);
    }    
    
    #posts event SolveDisc sd;
    #uses interface Solving env;
    #reads data Order order;
    #reads data Top top;
    #reads data Place place;

    context()
        {
          (ev.level > 0) && (ev.alwaysApplies || order.get(disc,ev.disc));
        }
    #reasoning method
    body()
      {
        @test(order.get(disc,ev.disc),null);
        logical int pin;
        logical int p3;
        thirdPin(p3);
        ag.writeLog("Plan "+pid+" will first achieve disc "+disc+" to pin "+p3);
        ag.indentRight();
        @achieve(top.get(ev.pin,ev.disc), sd.solve(disc,p3,ev.level-1,ag.tops(),ag.places()));
        ag.indentLeft();
        ag.writeLog("Plan "+pid+" will now solve disc "+ev.disc+" to pin "+ev.pin);
        ag.indentRight();
        @subtask(sd.solve(ev.disc,ev.pin,ev.level-1,ag.tops(),ag.places()));
        ag.indentLeft();
        @test(place.get(ev.pin,ev.disc), null);
      }
    

    #reasoning method
    thirdPin(logical int p3)
    {
      logical int p;
      place.get(p,disc);
      p3.unify(env.thirdPin(p.getValue(),ev.pin.getValue()));
    }

    #reasoning method
    pass() {
        if (ag.learningMode) {
            ag.planNodes[pid].setLastInstance(ev.state());
            ag.planNodes[pid].record(true,ev.level,(ev.level==ag.maxRecursion));
        }
    }
    #reasoning method
    fail() {
        if (ag.learningMode) {
            ag.planNodes[pid].setLastInstance(ev.state());
            ag.planNodes[pid].record(false,ev.level,(ev.level==ag.maxRecursion));
        }
    }
}

