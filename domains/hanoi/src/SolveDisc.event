/*************************************************************
 * This file is generated by the JACK Development Environment.
 * Saved at: Thu Feb 21 17:28:43 EST 2002
 * WARNING: DO NOT EDIT THIS OR YOUR CHANGES MAY BE LOST
 *************************************************************/


/* Documentation */

/**
   This event marks the desire to move a selected disc to a selected
   pin. The posting method, solve(..), also recognises disc==0 to be
   non-movable; this is in support of plan relevance computation.
*/

public event SolveDisc extends BDIGoalEvent {

	#set behavior PostPlanChoice one_applicable;
	#set behavior PostPlanChoice multiple_applicable;
	#set behavior ApplicableChoice random;
	#set behavior Recover repost; 
	#set behavior ApplicableSet new; 

    #posted as
    solve(logical int d, logical int p, int lvl, Integer[] t, Integer[] pl)
    {
      try {
        Player ag = ((Player)getAgent());
        movable = (d.getValue() != 0);
        alwaysApplies = ag.learningMode();
        disc = d;
        pin = p;
        level = lvl;
        discsOnTop = t;
        places = pl;
        String tstr = "";
        String pstr = "";
        if (alwaysApplies) {
            for (int i = 0; i < discsOnTop.length; i++) {
                tstr += discsOnTop[i].toString();
            }
            for (int i = 0; i < places.length; i++) {
                pstr += places[i].toString();
            }
        }
        ag.writeLog("Posted Solve(d="+disc+" p="+pin+" r="+lvl+" discsOnTop="+tstr+" places="+pstr+")");
        if ((ag.maxRecursion()-level) > ag.maxDepthThisEpisode()) {
            ag.setMaxDepthThisEpisode(ag.maxRecursion()-level);
        }
      }
      catch (Exception e) {
        throw new Error(("Strange variable: " + d));
      }
    }

    boolean movable;
    boolean alwaysApplies;
    logical int disc;
    logical int pin;
    int level;
    Integer[] discsOnTop;
    Integer[] places;

    public String[] state() {
        int i = 0;
        String[] state = new String[3+discsOnTop.length+places.length];
        try {
            state[i++] = Integer.toString(disc.getValue());
            state[i++] = Integer.toString(pin.getValue());
            state[i++] = Integer.toString(level);
        } catch (LogicException e) {
            System.err.println("Error parsing logical variables\n"+e);
            System.exit(9);
        }
        for (int j = 0; j < discsOnTop.length; j++) {
            state[i++] = discsOnTop[j].toString();
        }
        for (int j = 0; j < places.length; j++) {
            state[i++] = places[j].toString();
        }
        return state;
    }

}

