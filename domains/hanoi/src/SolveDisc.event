/*************************************************************
 * This file is generated by the JACK Development Environment.
 * Saved at: Thu Feb 21 17:28:43 EST 2002
 * WARNING: DO NOT EDIT THIS OR YOUR CHANGES MAY BE LOST
 *************************************************************/


/* Documentation */

/**
   This event marks the desire to move a selected disc to a selected
   pin. The posting method, solve(..), also recognises disc==0 to be
   non-movable; this is in support of plan relevance computation.
*/

public event SolveDisc extends BDIGoalEvent {

	#set behavior PostPlanChoice one_applicable;
	#set behavior PostPlanChoice multiple_applicable;
	#set behavior ApplicableChoice random;
	#set behavior Recover never;

    #posted as
    solve(logical int d,logical int p, boolean a, boolean b, boolean c)
    {
      try {
        disc = d;
        pin = p;
        movable = (disc.getValue() != 0);
        alwaysApplies = ((Player)getAgent()).learningMode;
        alreadyOnTargetPin = a;
        isSourcePinBlocked = b;
        isTargetPinBlocked = c;
        ((Player)getAgent()).writeLog("Posted Solve(d="+disc+" p="+pin+" alreadyOnTargetPin="+alreadyOnTargetPin+" isSourcePinBlocked="+isSourcePinBlocked+" isTargetPinBlocked="+isTargetPinBlocked+")");
      }
      catch (LogicException e) {
        throw new Error(("Strange variable: " + d));
      }
    }

    logical int disc;
    logical int pin;
    boolean movable;
    boolean alwaysApplies;
    boolean alreadyOnTargetPin;
    boolean isSourcePinBlocked;
    boolean isTargetPinBlocked;

    public String[] state() {
        String[] state = new String[3];
        state[0]=Boolean.toString(alreadyOnTargetPin);
        state[1]=Boolean.toString(isSourcePinBlocked);
        state[2]=Boolean.toString(isTargetPinBlocked);
        return state;
    }

}

