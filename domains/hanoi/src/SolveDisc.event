/*************************************************************
 * This file is generated by the JACK Development Environment.
 * Saved at: Thu Feb 21 17:28:43 EST 2002
 * WARNING: DO NOT EDIT THIS OR YOUR CHANGES MAY BE LOST
 *************************************************************/


/* Documentation */

/**
   This event marks the desire to move a selected disc to a selected
   pin. The posting method, solve(..), also recognises disc==0 to be
   non-movable; this is in support of plan relevance computation.
*/

public event SolveDisc extends BDIGoalEvent {

	#set behavior PostPlanChoice one_applicable;
	#set behavior PostPlanChoice multiple_applicable;
	#set behavior ApplicableChoice random;
	#set behavior Recover never;

    #posted as
    solve(logical int d, logical int p, int lvl, int a, int b, int c)
    {
      try {
        movable = (d.getValue() != 0);
        alwaysApplies = ((Player)getAgent()).learningMode;
        disc = d;
        pin = p;
        level = lvl;
        topDiscOnPin0 = a;
        topDiscOnPin1 = b;
        topDiscOnPin2 = c;
        if (alwaysApplies) {
            ((Player)getAgent()).writeLog("Posted Solve(d="+disc+" p="+pin+" r="+level+" top0="+topDiscOnPin0+" top1="+topDiscOnPin1+" top2="+topDiscOnPin2+")");
        }
      }
      catch (Exception e) {
        throw new Error(("Strange variable: " + d));
      }
    }

    boolean movable;
    boolean alwaysApplies;
    logical int disc;
    logical int pin;
    int level;
    int topDiscOnPin0;
    int topDiscOnPin1;
    int topDiscOnPin2;

    public String[] state() {
        int i = 0;
        String[] state = new String[5];
        try {
            state[i++] = Integer.toString(disc.getValue());
            state[i++] = Integer.toString(pin.getValue());
        } catch (LogicException e) {
            System.err.println("Error parsing logical variables\n"+e);
            System.exit(9);
        }
        //state[i++] = Integer.toString(level);
        state[i++] = Integer.toString(topDiscOnPin0);
        state[i++] = Integer.toString(topDiscOnPin1);
        state[i++] = Integer.toString(topDiscOnPin2);
        return state;
    }

}

