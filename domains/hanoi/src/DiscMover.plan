import gui.Towers;

/**
   The DiscMover plan actually moves a disc by updating the belief
   structures.
*/

public plan DiscMover extends Plan {

    #handles event MoveDisc ev;

    static boolean
    relevant(MoveDisc ev)
    {
        return true;
    }

    #modifies data Order order;
    #modifies data Top top;
    #modifies data Place place;
    #reads data Towers window;
    #uses interface Player ag;

    context()
    {
        true;
    }

    #reasoning method
    body()
    {
        logical int disc;       // The disc to move
        logical int discOldTop; // The existing top disc on the target pin
        logical int discNewTop; // The top disc on the source after the move

        if (!ev.pinFrom.unify(ev.pinTo) && top.get(ev.pinFrom,disc) && !disc.unify(0) && top.get(ev.pinTo,discOldTop) && (disc.getValue() > discOldTop.getValue())) {

            ag.writeLog("Moving disc " + disc + " from pin " + ev.pinFrom + " to pin " + ev.pinTo);

            // The disk below the source disc becomes the new top disc on 
            // the source pin after the move,
            // or 0 (=the table) when the last disc is moved.
            (order.get(disc.getValue(),discNewTop) || discNewTop.unify(0));
            top.add(ev.pinFrom.getValue(),discNewTop.getValue());

            // The moved disc becomes the top disc on the target pin.
            order.add(disc.getValue(),discOldTop.getValue());
            top.add(ev.pinTo.getValue(),disc.getValue());

            // The new place of the moved disc is the target pin.
            place.add(ev.pinTo.getValue(),disc.getValue());

            printStack();

            if (window.visibleMode()) {
                @waitFor(window.moveDisc(disc.getValue(),ev.pinTo.getValue()));
            }
        }
    }
    
    #reasoning method
    printStack()
    {
        ag.writeLog("Stacking state ------");
        for (int pin = 0;(pin < 3);pin++ ){
            logical int disc;
            String s = "Pin " + pin + " - top to bottom: ";
            top.get(pin,disc);
            for (int i = disc.getValue();(i > 0);){
                logical int j;
                s += " " + i;
                order.get(i,j);
                i = j.getValue();
            }
            ag.writeLog(s);
        }
    }
}

