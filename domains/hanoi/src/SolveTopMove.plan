/*************************************************************
 * This file is generated by the JACK Development Environment.
 * Saved at: Thu Feb 21 17:28:42 EST 2002
 * WARNING: DO NOT EDIT THIS OR YOUR CHANGES MAY BE LOST
 *************************************************************/


/* Documentation */

/**
   This plan solves how to move a disc to a given pin when the disc is
   at the top of a pin, but not the right pin, though the right pin
   admits the disc.
*/

import agents.PlanNode;
import PlanIdInfo;

public plan SolveTopMove extends Plan {

    public int pid = 1;

    logical int pin;
    logical int disc;
    #handles event SolveDisc ev;
    #uses interface Player ag;

    public PlanInstanceInfo getInstanceInfo(){
        return ag.planInfo(pid, ev.state(), ev.level, 1/*nodeComplexity*/);
    }

    static boolean
    relevant(SolveDisc ev)
    {
        return (ev.alwaysApplies || ev.movable);
    }    
    
    #posts event MoveDisc md;
    #reads data Top top;
    #reads data Place place;

    context()
    {
        (ev.level > 0) && (ev.alwaysApplies || (((top.get(pin,ev.disc) && !pin.unify(ev.pin)) && top.get(ev.pin,disc)) && (disc.getValue() < ev.disc.getValue())));
    }
    
    #reasoning method
    body()
    {
        top.get(pin,ev.disc);
        @subtask(md.move(pin,ev.pin));
        @test(place.get(ev.pin,ev.disc),null);
    }

    #reasoning method
    pass() {
        if (ag.learningMode()) {
            ag.record(pid, true, ev.state(), ev.level);
        }
    }
    #reasoning method
    fail() {
        if (ag.learningMode()) {
            ag.record(pid, false, ev.state(), ev.level);
        }
    }

}

