/**
   Main plan of the agent: initialize the beliefsets, solve the problem
   and print out the result.
*/

import gui.Towers;

public plan StackingStarter extends Plan {
    
    #handles event StackingStart ev;
    #uses interface Player ag;

    static boolean
    relevant(StackingStart ev)
    {
        return true;
    }

    #posts event StackDisc sd;
    #posts event StackingStart evt;
    #reads data Order order;
    #modifies data Top top;
    #modifies data Place place;
    #modifies data Towers window;

    context()
    {
        true;
    }

    #reasoning method
    body()
    {
        if (ev.doInit) {
            initializeTop();
        }
        @subtask(sd.stack());
    }
    
    #reasoning method
    pass()
    {
        if (ag.demoMode || (ag.episode >= (ag.maxEpisodes-1))) {
            ag.finish();
            System.exit(0);
        } else {
            ag.indentReset();
            ag.episode++;
            @post(evt.start(false));
        }
    }

    #reasoning method
    fail()
    {
        if (ag.demoMode || (ag.episode >= (ag.maxEpisodes-1))) {
            ag.finish();
            System.exit(0);
        } else {
            ag.indentReset();
            ag.episode++;
            @post(evt.start(false));
        }
    }

    #reasoning method
    initializeTop()
    {
        for (int i = 0;(i < 3);i++ )top.add(i,0);int pin = 0;
        logical int d1;
        logical int d2;
        for (Cursor c = order.get(d1,d2);c.next();){
            logical int d3;
            if (!order.get(d3,d1))
              top.add(pin++ ,d1.getValue());
        }
        for (Cursor c = top.get(d1,d2);c.next();){
            initPlace(d1.getValue(),d2.getValue());
        }
    }

    #reasoning method
    initPlace(int pin,int disc)
    {
        logical int d;
        place.add(pin,disc);
        if (order.get(disc,d)) {
            initPlace(pin,d.getValue());
        }
        if (window.visibleMode()) {
            window.addDisc(disc,pin);
        }
    }
}
