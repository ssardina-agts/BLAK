/*************************************************************
 * This file is generated by the JACK Development Environment.
 * Saved at: Thu Feb 21 17:28:42 EST 2002
 * WARNING: DO NOT EDIT THIS OR YOUR CHANGES MAY BE LOST
 *************************************************************/


/* Documentation */

/**
   This plan handles disc==0, i.e. "attempt moving the table"
*/

import agents.PlanNode;
import PlanIdInfo;

public plan SolveZero extends Plan {

    public int pid = 0;

    #handles event SolveDisc ev;
    #uses interface Player ag;

    public PlanInstanceInfo getInstanceInfo(){
        if (ag.learningMode) {
            PlanNode thisNode = ag.planNodes[pid];
            double coverage = thisNode.getCoverage(ev.state());
            if (thisNode.useDT(1/*Iteration: not used*/)){
                double[] ps = thisNode.getProbability(ev.state());
                return new PlanIdInfo(pid, ps[0], coverage, 1.0, false);
            } else{
                return new PlanIdInfo(pid, 0.5, coverage, 1.0, false);
            }
        } else {
            return new PlanIdInfo(pid, 0.5, 1.0, 1.0, false);
        }
    }


    static boolean
    relevant(SolveDisc ev)
    {
        return (ev.alwaysApplies || !ev.movable);
    }
    
    #uses interface Solving env;

    context()
    {
        (ev.level < ag.maxRecursion) && (ev.alwaysApplies || true);
    }

    #reasoning method
    body()
    {
        @test(!ev.movable,null);
    }

    #reasoning method
    pass() {
        if (ag.learningMode) {
            ag.planNodes[pid].setLastInstance(ev.state());
            ag.planNodes[pid].record(true);
        }
    }
    #reasoning method
    fail() {
        if (ag.learningMode) {
            ag.planNodes[pid].setLastInstance(ev.state());
            ag.planNodes[pid].record(false);
        }
    }
}

