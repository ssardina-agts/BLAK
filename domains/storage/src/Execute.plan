import agents.PlanNode;
import PlanIdInfo;

public plan Execute extends Plan {

    #handles event Solve ev;
    #uses interface BatteryManager ag;
    #reads data ModuleState states;
    #reads data ModuleConfig configs;


    public static final int pid = 3;
    public static final String pname = "Execute";
    private boolean eval;

    public PlanInstanceInfo getInstanceInfo(){
        return new PlanIdInfo(ev.state(), pid, 1.0/*prob*/, 1.0/*pconf*/, 1.0/*sconf*/, false/*isFTH*/);
    }

    static boolean relevant(Solve ev) {
        return (ev.module <= 0);
    }    
    
    context() {
        true;
    }
    
    
    #reasoning method
    body() {
        ag.writeLog("Plan "+pname+" is operating the configured modules for one period.");
        eval = ag.operateBattery(1,ev.request);
    }
    
    #reasoning method
    pass() {
        String estr = eval ? "PASS" : "FAIL";
        ag.writeLog("Plan "+pname+" finished operating the battery configuration for one period. Evaluation was "+estr+".");
        if (!eval) {
            /* The evaluation was FAIL so all plans in the trace should actually record a failure. */
            ag.activeExecutionTrace().setShouldRecordFailure(true);
            ag.writeLog("Plan "+pname+" will force all plans in the active execution trace to treat this result as a failure.");
        }
        ag.record(pid, true, ev.state(), ev.module);
    }

    #reasoning method
    fail() {
        ag.writeLog("Plan "+pname+" failed. Should never happen!");
        System.exit(9);
    }
}

