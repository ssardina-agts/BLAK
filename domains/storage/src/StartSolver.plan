public plan StartSolver extends Plan {
    
    #handles event StartSolve ev;
    #uses interface BatteryManager ag;

    #posts event Solve sd;
    #posts event StartSolve evt;
    #modifies data ModuleState states;
    #modifies data ModuleConfig configs;

    static boolean
    relevant(StartSolve ev) {
        return true;
    }

    context() {
        true;
    }

    #reasoning method
    body()
    {
        ag.writeLog("EPISODE "+ag.episode()+" --------------------------------------");        

        /* Initialise all modules to NOTINUSE at the start of each episode.
         * Start with all modules discharged in episode 1.
         */
        int nMax = 0;
        int nMin = 0;
        for (int m = 1; m <= ag.nModules(); m++) {
            try{
                if (ag.episode() == 1) {
                    states.add(m,ag.HEALTH_MIN);
                }
                configs.add(m,ag.CONFIG_NOTINUSE);
                int health = states.get(m);
                if ((ag.moduleFailCycle()>0) && (ag.episode() >= (((m-1)*ag.moduleFailCycle())+500)) && (ag.episode() < (m*ag.moduleFailCycle()))) {
                    nMax += 1;
                } else if (ag.capacityDeteriorationCycle()>0 && (ag.episode() >= ag.capacityDeteriorationCycle())) {
                    nMax += (health>=(ag.HEALTH_MIN+ag.HEALTH_RANGE-ag.CAPACITY_DETERIORATION)) ? 1 : 0;
                } else {
                    nMax += (health>=(ag.HEALTH_MIN+ag.HEALTH_RANGE)) ? 1 : 0;
                }
                nMin += (health<=ag.HEALTH_MIN) ? 1 : 0;
            } catch (Exception e) {
                ag.writeLog("BatteryManager: Exception while resetting battery module "+m+".");
                System.exit(9);
            }
        }
        
        /* Generate a satisfiable request */
        int minLimit = ag.nModules() - nMin;
        int maxLimit = ag.nModules() - nMax;
        int request = ag.generator().nextInt(minLimit+maxLimit+1)-minLimit;

        /* Solve it */
        @subtask(sd.solve(request,ag.nModules(),ag.batteryState()));
    }
    
    #reasoning method
    pass() {
        /* Finish the episode */
        ag.finishEpisode();
        /* If we haven't finished all episodes then start again */
        @post(evt.start());
    }

    #reasoning method
    fail()
    {
        /* Finish the episode */
        ag.finishEpisode();
        /* If we haven't finished all episodes then start again */
        @post(evt.start());
    }

}
