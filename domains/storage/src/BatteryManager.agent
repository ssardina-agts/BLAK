import aos.util.Properties;
import aos.jack.jak.beliefset.BeliefSetException;

import java.util.*;
import java.io.*;

import trees.Logger;
import trees.Tree;
import trees.Node;

import agents.PlanNode;
import agents.GoalNode;
import agents.ExecutionTrace;
import agents.Config.PlanSelectMode;
import agents.Config.UpdateMode;
import agents.Config.RunMode;

import weka.core.FastVector;
import weka.core.Attribute;

public agent BatteryManager extends Agent implements Logger {

    #private data ModuleState states();
    #private data ModuleConfig configs();
    #posts event Solve ss;
    #handles event Solve;
    #posts event StartSolve sts;
    #handles event StartSolve;

	#uses plan SetCharge;
	#uses plan SetDischarge;
	#uses plan SetNotInUse;
	#uses plan Execute;
	#uses plan MetaPlan;
    #uses plan StartSolver;
	#handles event PlanChoice;

    public static final int HEALTH_MIN = 0;
    public static final int HEALTH_RANGE = 3;
    public static final int CONFIG_MIN = -1;
    public static final int CONFIG_RANGE = 3;
    public static final int CONFIG_DISCHARGE = -1;
    public static final int CONFIG_NOTINUSE = 0;
    public static final int CONFIG_CHARGE = 1;
    public static final int CAPACITY_DETERIORATION = 1;

    private int nModules;
    private int tolerance;
    private int[] discharges;
    private int capacity_deterioration_cycle;
    private int module2_fail_cycle;

    //--- BDI Learning Framework related
    private int episode;
    private int nEpisodes;
    public PlanNode[] planNodes;
    private ExecutionTrace activeExecutionTrace; 
    private Random generator;
    private Random selector;
    private PlanSelectMode pselect;
    private UpdateMode uselect;
    private RunMode rselect;
    private double applicabilityThreshold;
    private double confidenceAlpha;
    private boolean lastResult;
    private int lastRequest;
    private int lastResponse;
    
    //--- Logger related
    private int indent = 0;
    private PrintWriter writerOut;
    private PrintWriter writerRes;
    private String targetDir;
    
    BatteryManager(int episodes, int modules, int tolerance, 
            int detcycle, int m2failcycle,
            PlanSelectMode pselect, UpdateMode uselect, RunMode rselect, 
            int buildThreshold, int wExperience,
            int stableK, double stableE, int stableW, int stateW, double alpha, 
            String targetDir, String filename, 
            long seed, String loadInit, String saveInit) {
            
        super("BatteryManager");
        this.nEpisodes = episodes;
        this.nModules = modules;
        this.tolerance = tolerance;
        discharges = new int[nModules];
        capacity_deterioration_cycle = detcycle;
        module2_fail_cycle = m2failcycle;
        
        //--- BDI Learning Framework related
        this.activeExecutionTrace = new ExecutionTrace();
        this.selector = new Random();
        this.generator = (seed==0) ? new Random() : new Random(seed);
        this.pselect = pselect;
        this.uselect = uselect;
        this.rselect = rselect;
        this.confidenceAlpha = alpha;
        this.lastResult = false;
        this.lastRequest = 0;
        this.lastResponse = 0;
        
        //--- Logger related
        this.targetDir = ".";
        try{
            writerOut = new PrintWriter(targetDir + "/" + filename + ".out");
            writerRes = new PrintWriter(targetDir + "/" + filename + "-episodes.csv");
        }catch(IOException e){
            System.err.println("Error opening the file for writing the outcome \n"+e);
            System.exit(9);
        }

        //--- Initialise Learning Framework
        initLearning((Logger)this, nModules, pselect, uselect, rselect, buildThreshold, wExperience, stableK, stableE, stableW, stateW);
        
        //--- Initialise the system
        episode = 1;
    }

    public int nModules() {
        return nModules;
    }

    public int episode() {
        return episode;
    }
    
    public ExecutionTrace activeExecutionTrace() {
        return activeExecutionTrace;
    }

    public double applicabilityThreshold() {
        return 0.0;
    }

    public double confidenceAlpha() {
        return confidenceAlpha;
    }

    public Random generator() {
        return generator;
    }

    public Random selector() {
        return selector;
    }

    public PlanSelectMode pselect() {
        return pselect;
    }

    public UpdateMode uselect() {
        return uselect;
    }

    public RunMode rselect() {
        return rselect;
    }
    
    public int capacityDeteriorationCycle() {
        return capacity_deterioration_cycle;
    }

    public int module2FailCycle() {
        return module2_fail_cycle;
    }

    /*** BDI Learning Framework related ***/
    
    public PlanIdInfo planInfo(int pid, String[] state) {
        PlanNode thisNode = planNodes[pid];
        double planConfidence = thisNode.averageExperiencedStability(state);
        double stateConfidence = thisNode.stateExperienceConfidence(state);
        double[] ps = thisNode.getProbability(state);
        return new PlanIdInfo(state, pid, ps[0], planConfidence, stateConfidence, thisNode.isFailedThresholdHandler());
    }

    public String[] batteryState() {
        // Return a concat of module health and config
        String[] s = new String[nModules*2];
        String sstr = "";
        String cstr = "";
        int c = 0;
        int h = 0;
        for (int m = 0; m < nModules; m++) {
            int module = m+1;
            int mstate = 0;
            int mconfig = 0;
            try{
                mstate = states.get(module);
                mconfig = configs.get(module);
                sstr += Integer.toString(mstate);
                cstr += (mconfig==CONFIG_DISCHARGE) ? "D" : (mconfig==CONFIG_CHARGE) ? "C" : "N" ;
            } catch (BeliefSetException e) {
                writeLog("BatteryManager: BeliefSetException while retrieving state information for module "+module+".");
                System.exit(9);
            }
            s[m] = Integer.toString(mstate);
            s[m+nModules] = (mconfig==CONFIG_DISCHARGE) ? "D" : (mconfig==CONFIG_CHARGE) ? "C" : "N" ;
            h += mstate;
            c += mconfig;
        }
        writeLog("BatteryManager: health=["+sstr+"] config=["+cstr+"]");
        return s;
    }
    
    public void go() {
        postEvent(sts.start());
    }
    
    public boolean meetsConstraints(int request, int module, int proposedConfig) {
    
        int mstate=0;
        int mconfig=0;
        try{
            mstate = states.get(module);
            mconfig = proposedConfig;
        } catch (BeliefSetException e) {
            writeLog("BatteryManager: BeliefSetException while checking battery module "+module+".");
            System.exit(9);
        }
            
        /* Check that operational constraints are met */
        int nstate = mstate + mconfig;
        if (nstate<HEALTH_MIN) {
            writeLog("BatteryManager: Module "+module+" constraint check failed. Cannot discharge an empty module.");
            return false;
        } else if (nstate>(HEALTH_MIN+HEALTH_RANGE)) {
            writeLog("BatteryManager: Module "+module+" constraint check failed. Cannot charge beyond full capacity.");
            return false;
        }

        /* Check that the proposed config will not choke the solution */
        int configSoFar = 0;  /* total rate so far */
        for (int i = nModules; i > module; i--) {
            try{
                configSoFar += configs.get(i);
            } catch (BeliefSetException e) {
                writeLog("BatteryManager: BeliefSetException while checking config for module "+i);
                System.exit(9);
            }
        }
        int modulesLeftToConfigure = module-1; /* Since we start configuring from nModules down */
        int configRequired = request - configSoFar - proposedConfig; /* At least this many more should charge to have a hope of meeting the request */
        if (Math.abs(configRequired) > modulesLeftToConfigure) {
            writeLog("BatteryManager: Module "+module+" constraint failed. Proposed config will cause output to fall short of global request.");
            return false;
        }
        return true;
    }
    
    public boolean operateBattery(int period, int request) {
        int reading = 0;
        for (int i=0; i < period; i++) {
            /* Operate and update charge for each module */
            for (int m=1; m <= nModules; m++) {
                /* Module model: Simple and deterministic for now. 
                 * The possible health states are [0-Empty:4-Full];
                 * and charge/discharge steps up/down this scale every period.
                 */
                try{
                    int mstate = states.get(m);
                    int mconfig = configs.get(m);
                    
                    /* Modelling degradation in module capacity over time. 
                     * After N cycles, the module capacity drops by 1.
                     * So charging past MAX-1 has no effect.
                     */
                    if ((capacity_deterioration_cycle>0) && (cycles(m) > capacity_deterioration_cycle) && (mstate >= HEALTH_MIN+HEALTH_RANGE-CAPACITY_DETERIORATION) && (mconfig==CONFIG_CHARGE)) {
                        mstate = HEALTH_MIN+HEALTH_RANGE-CAPACITY_DETERIORATION;
                        mconfig = CONFIG_NOTINUSE;
                        writeLog("BatteryManager: Module "+m+" capacity has deteriorated after "+capacity_deterioration_cycle+" cycles. Charging past "+mstate+" will have no effect.");
                    }
                    
                    /* Modelling module failure.
                     * After N cycles, module 2 fails.
                     * So charge/discharge has no effect.
                     */
                    if ((m==2) && (module2_fail_cycle>0) && (cycles(m) > module2_fail_cycle)) {
                        mstate = HEALTH_MIN;
                        mconfig = CONFIG_NOTINUSE;
                        writeLog("BatteryManager: Module "+m+" has failed after "+module2_fail_cycle+" cycles. Charging/Discharging will have no effect.");
                    }
                    
                    discharges[m-1] += (mconfig==CONFIG_DISCHARGE) ? 1 : 0;

                    int nstate = mstate + mconfig;
                    nstate = (nstate<HEALTH_MIN) ? HEALTH_MIN : 
                        (nstate>(HEALTH_MIN+HEALTH_RANGE)) ? HEALTH_MIN+HEALTH_RANGE : nstate;
                    states.add(m,nstate);
                    writeLog("BatteryManager: Module "+m+" changed states from "+mstate+"->"+nstate+". Cycle number "+cycles(m)+".");
                    if (nstate != mstate) {
                        /* Append measured rate of charge/discharge */
                        reading +=mconfig;
                    }
                } catch (BeliefSetException e) {
                    writeLog("BatteryManager: BeliefSetException while operating battery module "+m+".");
                    System.exit(9);
                }
            }
        }
        
        /* Now evaluate the reading against the request */
        boolean eval = (reading >= (request - tolerance)) && (reading <= (request + tolerance));
        writeLog("BatteryManager: Request was "+request+" (+/- tolerance of "+tolerance+"). "+
            "Final Reading is "+reading+".");

        /* Record for logging */
        lastRequest = request;
        lastResponse = reading;

        return eval;
    }
    
    public int cycles(int m) {
        int cycleRange = HEALTH_RANGE-CAPACITY_DETERIORATION; /* pessimistic count */
        return (discharges[m-1]/cycleRange);
    }
    
    public void finishEpisode() {
        /* Record the result for plotting */
        writeResult(episode,lastResult,lastRequest,lastResponse);

        /* Finish up */
        indentReset();
        activeExecutionTrace.reset();
        episode++;
        if (episode > nEpisodes) {
            writeLog("BatteryManager: Finished run.");
            for (int i = 0; i < planNodes.length; i++) {
                writeLog(planNodes[i].getDT());
            }
            writerOut.close();
            writerRes.close();
            System.exit(0);
        }
    }
    
    public void record(int pid, boolean res, String[] state, int module) {
        boolean isRoot = (module == nModules);
        planNodes[pid].setLastInstance(state);
        if (activeExecutionTrace.shouldRecordFailure()) {
            res = false;
            writeLog("Forced result to (-) for Plan "+planNodes[pid].name()+"." );
        }
        planNodes[pid].record(res, activeExecutionTrace.poppedTraceStability(), isRoot, episode);
        
        /* Save this result */
        lastResult = res;
        
        /* Finished recording so pop this plan off the active execution trace */
        activeExecutionTrace.popTrace();
        writeLog("Removed Plan "+planNodes[pid].name()+" from active execution trace: "+activeExecutionTrace);
    }
    
    public void initLearning(Logger logger, int nModules, 
            PlanSelectMode pselect, UpdateMode uselect, RunMode rselect, 
            int buildThreshold, int wExperience,
            int stableK, double stableE, int stableW, int stateW) {
            
        FastVector classVal = new FastVector();
        classVal.addElement("+");
        classVal.addElement("-");

        /* Request is a discrete number in the range [-n:+n],
         * where n is the number of battery modules.
         */
        FastVector request = new FastVector();
        for (int i = -nModules; i < nModules+1; i++) {
            request.addElement(Integer.toString(i));
        }
        
        /* Module Ids */
        FastVector modules = new FastVector();
        for (int i = 0; i <= nModules; i++) {
            modules.addElement(Integer.toString(i));
        }
        
        /* Module charge is a discrete number in the range [HEALTH_MIN:HEALTH_MIN+HEALTH_RANGE]. */
        FastVector charge = new FastVector();
        for (int i = HEALTH_MIN; i <= HEALTH_MIN+HEALTH_RANGE; i++) {
            charge.addElement(Integer.toString(i));
        }

        /* Config is one of [D(discharging),N(notused),C(charging)] */
        FastVector config = new FastVector();
        config.addElement("D");
        config.addElement("N");
        config.addElement("C");

        /* Now assign all attributes */
        FastVector atts = new FastVector();
        atts.addElement(new Attribute("request",request));
        atts.addElement(new Attribute("module",modules));
        for (int i = 1; i <= nModules; i++) {
            atts.addElement(new Attribute("health"+i/*,charge*/));
        }
        //atts.addElement(new Attribute("health"));
        for (int i = 1; i <= nModules; i++) {
            atts.addElement(new Attribute("config"+i,config));
        }
        //atts.addElement(new Attribute("config"));
            
        atts.addElement(new Attribute("outcome",classVal));
    

        planNodes = new PlanNode[5];
        planNodes[0] = new PlanNode("SetCharge", atts, uselect, pselect, rselect, stableE, stableK, stableW, stateW, false, buildThreshold, wExperience, logger);
        planNodes[1] = new PlanNode("SetDischarge", atts, uselect, pselect, rselect, stableE, stableK, stableW, stateW, false, buildThreshold, wExperience, logger);
        planNodes[2] = new PlanNode("SetNotInUse", atts, uselect, pselect, rselect, stableE, stableK, stableW, stateW, false, buildThreshold, wExperience, logger);
        planNodes[3] = new PlanNode("Execute", atts, uselect, pselect, rselect, stableE, stableK, stableW, stateW, false, buildThreshold, wExperience, logger);
        planNodes[4] = new PlanNode("Dummy", atts, uselect, pselect, rselect, stableE, stableK, stableW, stateW, true, buildThreshold, wExperience, logger);

        Node[] goalNodes = new Node[1];
        goalNodes[0] = new GoalNode("G", logger);
        goalNodes[0].addChild(planNodes[0]);
        goalNodes[0].addChild(planNodes[1]);
        goalNodes[0].addChild(planNodes[2]);
        goalNodes[0].addChild(planNodes[3]);
        goalNodes[0].addChild(planNodes[4]);

        planNodes[0].addChild(goalNodes[0]);
        planNodes[1].addChild(goalNodes[0]);
        planNodes[2].addChild(goalNodes[0]);
    }
    
    /*** Logger Interface **/
    public void indentRight() {
        indent++;
    }

    public void indentLeft() {
        indent--;
    }
    
    public void indentReset() {
        indent=0;
    }

    public void writeLog(String str) {
        String s = "";
        for (int i = 0;(i < indent);i++ ) s+= " ";
        writerOut.println(s + str);
        writerOut.flush();
    }

    public void writeResult(int episode, boolean result, int request, int response) {
        String str = episode + (result ? " 1.0 0.0" : " 0.0 1.0") +
            " " + ((request<0) ? "" : "+") + Integer.toString(request) +
            " " + ((response<0) ? "" : "+") + Integer.toString(response);
        writerRes.println(str);
        writerRes.flush();
    }

    // Application entry point.
    public static void main(String[] args) {

        // Default Config
        int nModules = 5;
        int detcycle = 0;
        int failcycle = 0;
        PlanSelectMode pselect = PlanSelectMode.PROBABILISTIC;
        UpdateMode uselect = UpdateMode.CONCURRENT;
        RunMode rselect = RunMode.FAILURE_RECOVERY;
        int stableK = 1;
        double stableE = 0.5;
        int stableW = 5;
        int stateW = 5;
        int episodes=10;
        String targetDir = ".";
        String filename = "bm";
        long seed = 0;
        String saveInit = filename+".init";
        String loadInit = saveInit;
        double alpha = 0.5;
        int tolerance = 0;
        int buildThreshold = 2;
        int wExperience = 0;
        String help = "";
        help += " -a: Applies to confidence based learning only: Alpha parameter (default: "+alpha+")\n";
        help += " -c: Number of cycles after which module capacity deteriorates (default: "+detcycle+")\n";
        help += " -d: Target directory for output files (default: "+targetDir+")\n";
        help += " -e: Stability e value (default: "+stableE+")\n";
        help += " -f: Number of cycles after which module 2 fails  (default: "+detcycle+")\n";
        help += " -g: Random generator seed value (default: "+seed+")\n";
        help += " -h: Help message\n";
        help += " -i: Number of episodes to run (default: "+episodes+")\n";
        help += " -k: Stability k value (default: "+stableK+")\n";
        help += " -l: Number of samples to collect between decision tree builds (default: "+buildThreshold+")\n";
        help += " -m: Window of experiences to use for decision tree training (default: "+wExperience+")\n";
        help += " -n: Number of battery modules to simulate (default: "+nModules+")\n";
        help += " -o: Filename prefix for results (default: "+filename+")\n";
        help += " -s: Specifies operation modes (default: -s confidence -s failure_recovery)\n";
        help += " -t: Tolerance value for determining success (default: "+tolerance+")\n";
        help += " -u: Specifies operation modes (default: -u concurrent)\n";
        help += " -v: Applies to confidence learning only: Window size for execution stability (default: "+stableW+")\n";
        help += " -w: Applies to confidence learning only: Window size for domain stability (default: "+stateW+")\n";
        help += " -y: Load a goal/state generation sequence from file (default: "+loadInit+")\n";
        help += " -z: Save a goal/state generation sequence to file (default: "+saveInit+")\n";
        
        args = Jak.initialize(args);
        if (args.length > 0) {
            int index = 0;
            while (index < args.length) {
                String arg = args[index];
                index++;
                char option = arg.charAt(1);
                switch (option) {
                case 'a':
                    alpha = Double.parseDouble(args[index]);
                    index++;
                    break;
                case 'c':
                    detcycle = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'd':
                    targetDir = args[index];
                    index++;
                    break;
                case 'e':
                    stableE = Double.parseDouble(args[index]);
                    index++;
                    break;
                case 'f':
                    failcycle = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'g':
                    seed = Long.parseLong(args[index]);
                    index++;
                    break;
                case 'h':
                    System.out.println("Valid options are:");
                    System.out.println(help);
                    System.exit(0);
                case 'i':
                    episodes = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'k':
                    stableK = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'l':
                    buildThreshold = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'm':
                    wExperience = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'n':
                    nModules = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'o':
                    filename = args[index];
                    index++;
                    break;
                case 's':
                    String mode = args[index];
                    index++;
                    if (mode.equals("probabilistic"))
                        pselect = PlanSelectMode.PROBABILISTIC;
                    if (mode.equals("coverage"))
                        pselect = PlanSelectMode.COVERAGE;
                    if (mode.equals("confidence"))
                        pselect = PlanSelectMode.CONFIDENCE;
                    if (mode.equals("failure_recovery"))
                        rselect = RunMode.FAILURE_RECOVERY;
                    break;
                case 't':
                    tolerance = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'u':
                    String mode = args[index];
                    index++;
                    if (mode.equals("stable"))
                        uselect = UpdateMode.STABLE;
                    if (mode.equals("concurrent"))
                        uselect = UpdateMode.CONCURRENT;
                    break;
                case 'v':
                    stableW = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'w':
                    stateW = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'y':
                    loadInit = args[index];
                    index++;
                    break;
                case 'z':
                    saveInit = args[index];
                    index++;
                    break;
                }
            }
        }
        System.out.println("Using random generator seed: "+seed);
        BatteryManager p = new BatteryManager(episodes, nModules, tolerance, 
            detcycle, failcycle,
            pselect, uselect, rselect, buildThreshold, wExperience,
            stableK, stableE, stableW, stateW, alpha, 
            targetDir, filename, 
            seed, loadInit, saveInit);
        p.go();
    }

}