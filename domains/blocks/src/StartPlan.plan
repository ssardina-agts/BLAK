import java.io.*;
import java.util.Random;

public plan StartPlan extends Plan {

    #handles event Start ev;
	#posts event MoveEvent me;
	#posts event UpdateEvent ue;
	#posts event PrintEvent pe;
	#uses interface BWAgent ag;

    static boolean
    relevant(Start ev)
    {
        return true;
    }

    #modifies data Order order;
	#modifies data Movable mv;
	#modifies data InitStat is;
	#reads data GoalNew gl;
	#modifies data Blocks bl;

    context()
    {
        true;
    }

    #reasoning method
    body()
    {
		initOrder();
		if(ag.recursiveMax == 0)
		{
			ag.recursiveMax = (bl.getBlocks().length() - 1) * 2  ;
		} 
		ag.records = new String[ag.recursiveMax + 1];
        ag.writeLog("BEGIN -----------------------------------------");
		ag.writeLog("Initial state:");
		@subtask(ue.update());	
		@subtask(pe.print());
   }	
	
	#reasoning method
	initOrder() //randomly init order
	{	
		// get the blocks 
		logical String b1;
		logical String b2;
		String blocks = "";
		int blockNum = 0;
		for (Cursor c = gl.get(b1,b2);c.next();)
		{
			if (!(blocks.contains(b1.getValue())))
			{
				blockNum++;
				blocks += b1.getValue();
			}
			if (!(blocks.contains(b2.getValue())))
			{
				if (b2.getValue().compareTo("table") == 0 )
				{
					continue;
				}
				else
				{
					blockNum++;
					blocks += b2.getValue();
				}
			}
		}
		bl.setBlocks(blocks);
		// random put them include table or exclude(keep or the thing in one stack)
		Random r = new Random ();
		String b1 ;
		String b2 ;		
		int	position ;
		int stacknum = 0;
		while (blocks.length() > 0)
		{
			position = r.nextInt(blocks.length());
			b1 = blocks.substring(position,position + 1);
			blocks = blocks.replace(b1,"");
			if ((r.nextInt(1024)%3 == 1) || (stacknum == 0))
			{
				b2 = "table";
				order.add(b1,b2);
				mv.add(stacknum,b1);
				stacknum++;
			}
			else
			{	
				logical String b3;
				int x = r.nextInt(stacknum);
				mv.get(x,b3);
				b2 = b3.getValue();
				order.add(b1,b2);
				mv.add(x,b1);
			}
		}
// save the init state
		logical String block1;
		logical String block2;
		for(Cursor c = order.get(block1,block2);c.next();)
		{
			is.add(block1.getValue(),block2.getValue());
		}
	}
	
	#reasoning method
	pass()
	{
	}

	#reasoning method
	fail()
	{
	}

}
