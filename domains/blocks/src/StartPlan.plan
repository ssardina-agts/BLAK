import java.io.*;
import java.util.Random;

public plan StartPlan extends Plan {

    #handles event Start ev;
	#posts event MoveEvent me;
	#uses interface BWAgent ag;

    static boolean
    relevant(Start ev)
    {
        return true;
    }

    #modifies data Order order;
	#modifies data Movable mv;
	#modifies data Place pl;
	#reads data Goal gl;
	#modifies data Blocks bl;

    context()
    {
        true;
    }

    #reasoning method
    body()
    {
		initOrder();
        ag.writeLog("BEGIN -----------------------------------------");
        printAll();	
		for (int i = 0; i < ag.nEpisodes(); i++)
		{
            ag.writeLog("EPISODE "+ag.episode()+":-----------------------------------------");
            updateMovable();
            if (ag.goalsRemaining() > 0) {
                @subtask(me.move("",""));
                printAll();	
            } else {
                ag.writeLog("Nothing left to do");
            }
            ag.finishEpisode();
		}
    }	
	
	#reasoning method
	initOrder() //randomly init order
	{
		// get the blocks 
		logical String b1;
		logical String b2;
		String blocks = "";
		int blockNum = 0;
		for (Cursor c = gl.get(b1,b2);c.next();)
		{
			if (!(blocks.contains(b1.getValue())))
			{
				blockNum++;
				blocks += b1.getValue();
			}
			if (!(blocks.contains(b2.getValue())))
			{
				if (b2.getValue().compareTo("table") == 0 )
				{
					continue;
				}
				else
				{
					blockNum++;
					blocks += b2.getValue();
				}
			}
		}
		bl.setBlocks(blocks);
		// random put them include table or exclude(keep or the thing in one stack)
		Random r = new Random ();
		String b1 ;
		String b2 ;		
		int	position ;
		int stacknum = 0;
		while (blocks.length() > 0)
		{
			position = r.nextInt(blocks.length());
			b1 = blocks.substring(position,position + 1);
			blocks = blocks.replace(b1,"");
			if ((r.nextInt(1024)%3 == 1) || (stacknum == 0))
			{
				b2 = "table";
				order.add(b1,b2);
				mv.add(stacknum,b1);
				stacknum++;
			}
			else
			{	
				logical String b3;
				int x = r.nextInt(stacknum);
				mv.get(x,b3);
				b2 = b3.getValue();
				order.add(b1,b2);
				mv.add(x,b1);
			}
		}

	}

	#reasoning method
	updateMovable()
	{
        mv.deleteAll();
		int stack = 0;
		logical String b1 ;
		logical String b2 ;
		for (Cursor c = order.get(b1,b2);c.next();)
		{
			logical String b3 ;
			if (!order.get(b3,b1))
              mv.add(stack++ ,b1.getValue());
		}
		logical int stack ;
		logical String b3 ;
		for (Cursor c = mv.get(stack,b3);c.next();)
		{
				initPlace(stack.getValue(),b3.getValue());
		}
	}

	#reasoning method
	initPlace(int stack,String block)
	{
        logical String b;
		if (block.compareTo("table") != 0)
        	pl.add(stack,block);
        if (order.get(block,b)) 
            initPlace(stack,b.getValue());
	}

	#reasoning method
	printAll()
	{
		logical String b1;
		logical String b2;
		for (Cursor c = order.get(b1,"table");c.next();)
		{
            String block = b1.getValue();
            String stackStr = "|" + block;
            boolean done = false;
            while (!done) {
                logical String top;
                if (order.get(top,block)){
                    stackStr += "-"+top;
                    block = top.getValue();
                } else {
                    done = true;
                }
            }
			ag.writeLog(stackStr);
        }
        ag.writeLog("Subgoals remaining: "+ag.goalsRemaining());
	}
	
	#reasoning method
	pass()
	{
	}
}
