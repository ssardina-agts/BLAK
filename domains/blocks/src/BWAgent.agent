/* JAVA includes*/
import java.util.*;
import java.io.*;

/*JACK includes */
import aos.util.Properties;
import aos.jack.jak.beliefset.BeliefSetException;

/* BDI Learning Framework includes */
import trees.Logger;
import trees.Tree;
import trees.Node;
import agents.PlanNode;
import agents.GoalNode;
import agents.ExecutionTrace;
import agents.Config.PlanSelectMode;
import agents.Config.UpdateMode;
import agents.Config.RunMode;

/* WEKA includes for decision tree learning */
import weka.core.FastVector;
import weka.core.Attribute;



public agent BWAgent extends Agent implements Logger {

       //#private data ...
    //#posts event ...
    //#handles event ...
	#posts event Start st;
	#posts event MoveEvent me;
	#handles event MoveEvent;
	#handles event PlanChoice;
	#handles event Start;

	#uses plan StartPlan;	
	#uses plan MetaPlan ;
	#uses plan ConstructivePlan;
	#uses plan DeconstructivePlan;

	#private data Order order("./src/init.dat");//change later
	#private data Place pl();
	#private data Movable mv();
	#private data Goal gl("./src/goal.dat");

	//#uses plan MetaPlan;
	//#uses plan ...
    //--- BDI Learning Framework related
    private int episode;
    private int nEpisodes;
    public PlanNode[] planNodes;
    private ExecutionTrace activeExecutionTrace; 
    private Random generator;
    private Random selector;
    private PlanSelectMode pselect;
    private UpdateMode uselect;
    private RunMode rselect;
    private double applicabilityThreshold;
    private double confidenceAlpha;
    private boolean lastResult;
    private int lastRequest;
    private int lastResponse;
    
    //--- Logger related
    private int indent = 0;
    private PrintWriter writerOut;
    private PrintWriter writerRes;
    private String targetDir;
    
    BWAgent(int episodes,
            PlanSelectMode pselect, UpdateMode uselect, RunMode rselect, 
            int buildThreshold, double failThreshold, int wExperience,
            int stableK, double stableE, int stableW, int stateW, double alpha, 
            String targetDir, String filename, 
            long seed, String loadInit, String saveInit
            // ...
            ) {
            
        super("Blocks World Agent");
        this.nEpisodes = episodes;
        
        //--- BDI Learning Framework related
        this.applicabilityThreshold = failThreshold;
        this.activeExecutionTrace = new ExecutionTrace();
        this.selector = new Random();
        this.generator = (seed==0) ? new Random() : new Random(seed);
        this.pselect = pselect;
        this.uselect = uselect;
        this.rselect = rselect;
        this.confidenceAlpha = alpha;
        this.lastResult = false;
        this.lastRequest = 0;
        this.lastResponse = 0;
        
        //--- Logger related
        this.targetDir = ".";
        try{
            writerOut = new PrintWriter(targetDir + "/" + filename + ".out");
            writerRes = new PrintWriter(targetDir + "/" + filename + "-episodes.csv");
        }catch(IOException e){
            System.err.println("Error opening the file for writing the outcome \n"+e);
            System.exit(9);
        }

        //--- Initialise Learning Framework
        initLearning((Logger)this, pselect, uselect, rselect, buildThreshold, wExperience, stableK, stableE, stableW, stateW);
        
        //--- Initialise the system
        episode = 1;
    }

    public int episode() {
        return episode;
    }
    
    public int nEpisodes() {
        return nEpisodes;
    }
    
    public ExecutionTrace activeExecutionTrace() {
        return activeExecutionTrace;
    }

    public double applicabilityThreshold() {
        return applicabilityThreshold;
    }

    public double confidenceAlpha() {
        return confidenceAlpha;
    }

    public Random generator() {
        return generator;
    }

    public Random selector() {
        return selector;
    }

    public PlanSelectMode pselect() {
        return pselect;
    }

    public UpdateMode uselect() {
        return uselect;
    }

    public RunMode rselect() {
        return rselect;
    }
    
    /*** Agent Code ***/
    public void go() {
        System.out.println("Blocks World Agent: placeholder to begin execution.");
		postEventAndWait(st.start());
}
    
    /*** BDI Learning Framework related ***/
    
    //public PlanIdInfo planInfo(int pid, String[] state) {
        //PlanNode thisNode = planNodes[pid];
        //double planConfidence = thisNode.averageExperiencedStability(state);
        //double stateConfidence = thisNode.stateExperienceConfidence(state);
        //double[] ps = thisNode.getProbability(state);
        //return new PlanIdInfo(state, pid, ps[0], planConfidence, stateConfidence, thisNode.isFailedThresholdHandler());
    //}

    public void finishEpisode() {
        /* Record the result for plotting */
        writeResult(episode,lastResult,lastRequest,lastResponse);

        /* Finish up */
        indentReset();
        activeExecutionTrace.reset();
        episode++;
        if (episode > nEpisodes) {
            writeLog("Blocks World Agent: Finished run.");
            for (int i = 0; i < planNodes.length; i++) {
                writeLog(planNodes[i].getDT());
            }
            writerOut.close();
            writerRes.close();
            System.exit(0);
        }
    }
    
    public void record(int pid, boolean res, String[] state, int depth) {
        boolean isRoot = (depth == 1/*maxRecursion*/);
        planNodes[pid].setLastInstance(state);
        if (activeExecutionTrace.shouldRecordFailure()) {
            res = false;
            writeLog("Forced result to (-) for Plan "+planNodes[pid].name()+"." );
        }
        planNodes[pid].record(res, activeExecutionTrace.poppedTraceStability(), isRoot, episode);
        
        /* Save this result */
        lastResult = res;
        
        /* Finished recording so pop this plan off the active execution trace */
        activeExecutionTrace.popTrace();
        writeLog("Removed Plan "+planNodes[pid].name()+" from active execution trace: "+activeExecutionTrace);
    }
    
    public void initLearning(Logger logger, 
            PlanSelectMode pselect, UpdateMode uselect, RunMode rselect, 
            int buildThreshold, int wExperience,
            int stableK, double stableE, int stableW, int stateW) {
            
        //FastVector classVal = new FastVector();
        //classVal.addElement("+");
        //classVal.addElement("-");

        //FastVector request = new FastVector();
        //for (int i = -nModules; i < nModules+1; i++) {
        //    request.addElement(Integer.toString(i));
        //}
        
        /* Now assign all attributes */
        //FastVector atts = new FastVector();
        //atts.addElement(new Attribute("request",request));
        //atts.addElement(new Attribute("module",modules));
        //atts.addElement(new Attribute("outcome",classVal));
    

        //planNodes = new PlanNode[5];
        //planNodes[0] = new PlanNode("SetCharge", atts, uselect, pselect, rselect, stableE, stableK, stableW, stateW, false, buildThreshold, wExperience, logger);
        //planNodes[1] = new PlanNode("SetDischarge", atts, uselect, pselect, rselect, stableE, stableK, stableW, stateW, false, buildThreshold, wExperience, logger);
        //planNodes[2] = new PlanNode("SetNotInUse", atts, uselect, pselect, rselect, stableE, stableK, stableW, stateW, false, buildThreshold, wExperience, logger);
        //planNodes[3] = new PlanNode("Execute", atts, uselect, pselect, rselect, stableE, stableK, stableW, stateW, false, buildThreshold, wExperience, logger);
        //planNodes[4] = new PlanNode("Dummy", atts, uselect, pselect, rselect, stableE, stableK, stableW, stateW, true, buildThreshold, wExperience, logger);

        //Node[] goalNodes = new Node[1];
        //goalNodes[0] = new GoalNode("G", logger);
        //goalNodes[0].addChild(planNodes[0]);
        //goalNodes[0].addChild(planNodes[1]);
        //goalNodes[0].addChild(planNodes[2]);
        //goalNodes[0].addChild(planNodes[3]);
        //goalNodes[0].addChild(planNodes[4]);

        //planNodes[0].addChild(goalNodes[0]);
        //planNodes[1].addChild(goalNodes[0]);
        //planNodes[2].addChild(goalNodes[0]);
    }
    
    /*** Logger Interface **/
    public void indentRight() {
        indent++;
    }

    public void indentLeft() {
        indent--;
    }
    
    public void indentReset() {
        indent=0;
    }

    public void writeLog(String str) {
        String s = "";
        for (int i = 0;(i < indent);i++ ) s+= " ";
        writerOut.println(s + str);
        writerOut.flush();
    }

    public void writeResult(int episode, boolean result, int request, int response) {
        String str = episode + (result ? " 1.0 0.0" : " 0.0 1.0") +
            " " + ((request<0) ? "" : "+") + Integer.toString(request) +
            " " + ((response<0) ? "" : "+") + Integer.toString(response);
        writerRes.println(str);
        writerRes.flush();
    }

    /*** Main  **/
    public static void main(String[] args) {

        // Default Config
        PlanSelectMode pselect = PlanSelectMode.PROBABILISTIC;
        UpdateMode uselect = UpdateMode.CONCURRENT;
        RunMode rselect = RunMode.FAILURE_RECOVERY;
        int stableK = 1;
        double stableE = 0.5;
        int stableW = 5;
        int stateW = 5;
        int episodes=10;
        String targetDir = ".";
        String filename = "bw";
        long seed = 0;
        String saveInit = filename+".init";
        String loadInit = saveInit;
        double alpha = 0.5;
        int buildThreshold = 2;
        int wExperience = 0;
        double failThreshold = 0.0;
        String help = "";
        help += " -a: Applies to confidence based learning only: Alpha parameter (default: "+alpha+")\n";
        help += " -b: Success threshold below which applicable plans should be rejected (default: "+failThreshold+")\n";
        help += " -d: Target directory for output files (default: "+targetDir+")\n";
        help += " -e: Stability e value (default: "+stableE+")\n";
        help += " -g: Random generator seed value (default: "+seed+")\n";
        help += " -h: Help message\n";
        help += " -i: Number of episodes to run (default: "+episodes+")\n";
        help += " -k: Stability k value (default: "+stableK+")\n";
        help += " -l: Number of samples to collect between decision tree builds (default: "+buildThreshold+")\n";
        help += " -m: Window of experiences to use for decision tree training (default: "+wExperience+")\n";
        help += " -o: Filename prefix for results (default: "+filename+")\n";
        help += " -s: Specifies operation modes (default: -s confidence -s failure_recovery)\n";
        help += " -u: Specifies operation modes (default: -u concurrent)\n";
        help += " -v: Applies to confidence learning only: Window size for execution stability (default: "+stableW+")\n";
        help += " -w: Applies to confidence learning only: Window size for domain stability (default: "+stateW+")\n";
        help += " -y: Load a goal/state generation sequence from file (default: "+loadInit+")\n";
        help += " -z: Save a goal/state generation sequence to file (default: "+saveInit+")\n";
        
        args = Jak.initialize(args);
        if (args.length > 0) {
            int index = 0;
            while (index < args.length) {
                String arg = args[index];
                index++;
                char option = arg.charAt(1);
                switch (option) {
                case 'a':
                    alpha = Double.parseDouble(args[index]);
                    index++;
                    break;
                case 'b':
                    failThreshold = Double.parseDouble(args[index]);
                    index++;
                    break;
                case 'd':
                    targetDir = args[index];
                    index++;
                    break;
                case 'e':
                    stableE = Double.parseDouble(args[index]);
                    index++;
                    break;
                case 'g':
                    seed = Long.parseLong(args[index]);
                    index++;
                    break;
                case 'h':
                    System.out.println("Valid options are:");
                    System.out.println(help);
                    System.exit(0);
                case 'i':
                    episodes = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'k':
                    stableK = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'l':
                    buildThreshold = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'm':
                    wExperience = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'o':
                    filename = args[index];
                    index++;
                    break;
                case 's':
                    String mode = args[index];
                    index++;
                    if (mode.equals("probabilistic"))
                        pselect = PlanSelectMode.PROBABILISTIC;
                    if (mode.equals("coverage"))
                        pselect = PlanSelectMode.COVERAGE;
                    if (mode.equals("confidence"))
                        pselect = PlanSelectMode.CONFIDENCE;
                    if (mode.equals("failure_recovery"))
                        rselect = RunMode.FAILURE_RECOVERY;
                    break;
                case 'u':
                    String mode = args[index];
                    index++;
                    if (mode.equals("stable"))
                        uselect = UpdateMode.STABLE;
                    if (mode.equals("concurrent"))
                        uselect = UpdateMode.CONCURRENT;
                    break;
                case 'v':
                    stableW = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'w':
                    stateW = Integer.parseInt(args[index]);
                    index++;
                    break;
                case 'y':
                    loadInit = args[index];
                    index++;
                    break;
                case 'z':
                    saveInit = args[index];
                    index++;
                    break;
                }
            }
        }
        System.out.println("Using random generator seed: "+seed);
        BWAgent p = new BWAgent(episodes,
            pselect, uselect, rselect, buildThreshold, failThreshold, wExperience,
            stableK, stableE, stableW, stateW, alpha, 
            targetDir, filename, 
            seed, loadInit, saveInit);
        p.go();
    }


//****************************self define*********************//
	private int maxStack = 10;
	public String [] currentStacks = new String [maxStack];
	public String movable = "";
	public int used = 0;
	public String [] goalStacks = new String [4];
	public String [] subgoal;
	public int acheived = 0;

//later should be implement as read from the files
/*
	void initializeCurrentStacks()
	{
		currentStacks[0] = "1abcde";
		currentStacks[1] = "1";
		currentStacks[2] = "1";
		currentStacks[3] = "1";
		currentStacks[4] = "1";
		currentStacks[5] = "1";
		currentStacks[6] = "1";
		currentStacks[7] = "1";
		currentStacks[8] = "1";
		currentStacks[9] = "1";
		goalStacks[0] = "1edc";
		goalStacks[1] = "1a";
		goalStacks[2] = "1b";
		goalStacks[3] = "1";
		used = 3;
	}*/
	void initializeCurrentStacks()
	{
		try{
			FileInputStream fstream = new FileInputStream("/home/theneil/project/state/StartStat.txt");
		        DataInputStream s = new DataInputStream(fstream);
			BufferedReader start  = new BufferedReader(new InputStreamReader(s));
			fstream = new FileInputStream("/home/theneil/project/state/GoalStat.txt");
			s = new DataInputStream(fstream);
			BufferedReader goal = new BufferedReader(new InputStreamReader(s));
			for (int i = 0; i < maxStack ; i++)
			{
				currentStacks[i] = "1";
			}
			for (int i = 0; i < 4 ; i++)
			{
				goalStacks[i] = "1";
			}
			int i = 0;
			String str;
			while ((str = start.readLine()) != null)	
			{
				currentStacks[i] =  str;
				i++;
				used++;
			}
			i = 0;
			while ((str = goal.readLine()) != null)	
			{
				if (i >= 4)
				{
					System.err.println("GoalStacks overload");
					break;
				}
				goalStacks[i] = str;
				i++;
			}
		    } catch (Exception e){//Catch exception if any
     			 System.err.println("Error: " + e.getMessage());
  		    }
	}
	// update the movable stack.
	// should be called before other operation in the plan 
	public void updateMovable()
	{
	    movable="";
	    for(int i = 0 ; i < used ; i++)
	    {
		currentStacks[i] = currentStacks[i].trim();
		if (currentStacks[i] == "1") continue;
		char t = currentStacks[i].charAt(currentStacks[i].length()-1);
		if (!(movable.contains((t+""))))
		{
			movable += t+"";
		}
	    }
	}

	// move one block to another stack 
	// stack should be int 
	// if int >= player.maxStackNumber
	// recreate the stacks and double the size 
	void move (char block , int ref)
	{
	    if (ref >= maxStack) // stack is full
	    {
		doubleStateStack();
	    }
            if (currentStacks[ref] == "1")// 
	    {
		used++;
	    }
	    remove(block);
            currentStacks[ref] += block+"";    

	}
	    
	// find a Empty stack to store the new stack
	int findEmpty()
	{
		for (int i = 0; i < maxStack ;i++)
		{
			currentStacks[i] = currentStacks[i].trim();
			if (currentStacks[i] == "1" ) return i;
		}
		return 9;
	}

	// remove the block from the stack
	void remove (char block)
	{
		for ( int i = 0 ; i < used ; i++ )
		{
			currentStacks[i] = currentStacks[i].trim();
			if (currentStacks[i] == "1") continue;
			char end = currentStacks[i].charAt(currentStacks[i].length()-1);
			if ( end == block ) 
			{
				if (currentStacks[i].length() == 2)
				{	
					currentStacks[i] = "1";
					return ;
				}
				else
				{
					currentStacks[i] = currentStacks[i].replace(end+"","");
					return ;
				}
			}
		}
	}

	// double the currentStacks size    
	void doubleStateStack()
	{
	    String [] temp = currentStacks;
	    currentStacks = new String [maxStack * 2]; 
	    // double the size 
	    for (int i = 0 ; i < temp.length ; i++)
	    {
		currentStacks[i] = temp[i];
		
	    }
	}
	
	// print all the stacks which contain blocks
	void print ()
	{
		for (int i = 0; i < used ; i++)
		{
			if (!(currentStacks[i] == "1"))
			System.out.println("stack "+i+":"+currentStacks[i]);

		}
	}

	// save the stacks information in the first several stacks
	void reSave()
	{
		String[] temp = new String [maxStack];
		used = 0;
		for (int i = 0; i < maxStack; i++ )
		{
			temp[i] = currentStacks[i];
			currentStacks[i] = "1";

		}	
		for (int i = 0; i < maxStack; i++ )
		{
			temp[i] = temp[i].trim();
			if (temp[i] == "1")
			{
				continue;
			}
			else 
			{
				currentStacks[used] = temp[i];
				used++;

			}

		}
	}
	
	// check whether the block is on the table and alone
	boolean isAlone (char b)
	{
		for (int i = 0; i <= used ; i++)
		{
			if ( (currentStacks[i].contains(b+"")) && (currentStacks[i].length() == 2))
			{
				return true ;
			}
		}
		return false;
	}

	// return which posion the block stay
	int position(char b)
	{
		for (int i = 0; i <= used ; i++)
		{
			if (currentStacks[i].contains(b+""))
			{
				return i ;
			}
		}
		return -1;

	}

	// split the goal into small sub goals
	// in order to help acheive the most sub goals
	
	void splitGoal()
	{
	    int total=0;
	    // how many sub goals need to achieve
	    for (int i = 0; i < goalStacks.length ;i++)
	    {
		total += goalStacks[i].length();
	    }
	    total -= goalStacks.length;
	    subgoal = new String [total];
	     
	    int i = 0;
	    for (int m = 0; m < goalStacks.length; m++)
	    {
	       for ( int j = 0; j <= (goalStacks[m].length() - 2); j++,i++)
	       {
		  subgoal[i] = goalStacks[m].substring(j, j+2);
		  System.out.println("Subgoal "+i+":"+subgoal[i]);
	       }         
	    }		

	}

	int subgoalAcheived()
	{
		acheived = 0;
		for (int i = 0 ; i < used ; i++)
		{
			for (int j = 0; j < subgoal.length; j++)
			{
				if ( (currentStacks[i].contains(subgoal[j])) && (subgoal[j] != "1"))
				{
					acheived++;
				}
			}
	
		}
		return acheived;
	}
//********************************self define end*******************************
}

// 
