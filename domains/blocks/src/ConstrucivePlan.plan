import java.util.Random;

plan ConstructivePlan extends Plan
{
	#handles event MoveEvent ev;
	#posts event MoveEvent me;
	#posts event PrintEvent pe;
	#posts event UpdateEvent ue;

	#uses interface BWAgent ag;
	
	#modifies data Order order;
	#modifies data Movable mv;
	#modifies data Place pl;
	#modifies data Goal gl;
	#reads data Blocks bl;

	public logical String first; 
	public logical String second;
	logical int a;
	logical int b;	

	static boolean 
	relevant(MoveEvent m)
	{
		return true;

	}
	
	context()
	{
        mv.get(a,first) && mv.get(b,second) &&          // find two free blocks
        !first.getValue().equals(second.getValue()) &&  // that are unique
        !first.getValue().equals("table") &&            // and not references to
        !second.getValue().equals("table") &&           // the table itself
        gl.get(first.getValue(),second.getValue());     // and where the goal is to have the first on the second
	}
	body()
	{
        ag.writeLog("ConstructivePlan: Moving block "+first.getValue()+" onto block "+second.getValue());
		order.add(first.getValue(),second.getValue());
		@subtask(ue.update());
		@subtask(pe.print());
		ag.recursive++;
		if((ag.goalsRemaining() != 0) && (ag.recursive < ag.recursiveMax))
		{
			@subtask(me.move("",""));
		}
		else if(ag.recursive >= ag.recursiveMax)
		{
			fail();
		}	
		else if ((ag.goalsRemaining() == 0))
		{	
			ag.records[ag.currentUsedRecord] = "000";
			ag.currentUsedRecord++;
			pass();
		}
	}

	#reasoning method 
	pass()
	{}
	
	#reasoning method
	fail()
	{
	}
}

