import java.util.Random;

plan ConstructivePlan extends Plan
{
	#handles event MoveEvent ev;
	#posts event MoveEvent me;
	#posts event PrintEvent pe;
	#posts event UpdateEvent ue;

	#uses interface BWAgent ag;
	
	#modifies data Order order;
	#modifies data Movable mv;
	#modifies data GoalNew gl;
	#reads data Blocks bl;

	public logical String first; 
	public logical String second;
	logical int a;
	logical int b;	

	static boolean 
	relevant(MoveEvent m)
	{
		return true;

	}
	
	context()
	{
        mv.get(a,first) && mv.get(b,second) &&          // find two free blocks
        !first.getValue().equals(second.getValue()) &&  // that are unique
        !first.getValue().equals("table") &&            // and not references to
        !second.getValue().equals("table") &&           // the table itself
		!order.get(first.getValue(),second.getValue()) && // and do not exsit in order
        gl.get(first.getValue(),second.getValue());     // and where the goal is to have the first on the second
	}
	body()
	{
		@test(ev.recursive > 0,null);
        ag.writeLog("ConstructivePlan: Recursion "+ev.recursive+". Moving block "+first.getValue()+" onto block "+second.getValue());
		order.add(first.getValue(),second.getValue());
		@subtask(ue.update());
		@subtask(pe.print());
		if(ag.goalsRemaining() > 0)
		{
			@subtask(me.move(ev.recursive-1));
		}

	}

	#reasoning method 
	pass()
	{
		ag.records[ev.recursive] = "000"; // add to the record that the process is successful 
        //ag.writeLog("ConstructivePlan Passed.");
	}
	
	#reasoning method
	fail()
	{
        //ag.writeLog("ConstructivePlan Failed.");	
	}
}

