<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- BLAK: BDI Learning Agent Kit -->
<project name="BLAK" basedir="." default="all">

<!-- USER CONFIG -->
<!-- Single option to control the iterations parameter for all tests -->
<property name="config.iterations" value="15000"/>
<property name="gnuplot.dep" value="gnuplot"/>
<property name="dot.dep" value="dot"/>
<property name="ps2pdf.dep" value="ps2pdf"/>
<property name="every" value="1"/>
<property name="range" value="[:]"/>
<!-- END USER CONFIG -->


<!-- Root directory that contains the BLAK distribution -->
<property name="root.dir" value="${basedir}"/>
<property name="scripts.dir" value="${root.dir}/scripts"/>
<property name="plot.sh" value="${scripts.dir}/plot.sh"/>

<property name="blak.dep" value="${root.dir}/lib/blak.jar"/>
<property name="specs.dir" value="${root.dir}/specs"/>
<property name="results.dir" value="${root.dir}/results"/>
<property name="results.all.dir" value="${results.dir}/all"/>

<!-- External dependencies. See README for installation instructions for JACK and WEKA -->
<property name="jack.dep" value="${root.dir}/lib/jack.jar"/>
<property name="weka.dep" value="${root.dir}/lib/weka.jar"/>

<!-- Standard sub-tree structure for indvidual tests -->
<property name="build.dir" value="build"/>
<property name="build.classes.dir" value="${build.dir}"/>
<property name="build.classes.plans.dir" value="${build.classes.dir}/plans"/>
<property name="build.classes.events.dir" value="${build.classes.dir}/events"/>
<property name="build.classes.agents.dir" value="${build.classes.dir}/agents"/>
<property name="build.sources.dir" value="${build.dir}"/>
<property name="build.sources.plans.dir" value="${build.sources.dir}/plans"/>
<property name="build.sources.events.dir" value="${build.sources.dir}/events"/>
<property name="build.sources.agents.dir" value="${build.sources.dir}/agents"/>

<!-- Default targets -->
<target name="all" description="Build, run and plot all tests" depends="testEcai,testImpactvars,testDummyvars,test01,test02,test03,test04,test05"/>

<target name="testEcai" description="Build, run and plot testEcai (Tests Stephane's tree)" depends="buildtestEcai,graphtestEcai,runtestEcai,plottestEcai"/>
<target name="testImpactvars" description="Build, run and plot testImpactvars (Tests impact of relevant variables)" depends="buildtestImpactvars1,graphtestImpactvars1,runtestImpactvars1,plottestImpactvars1"/>
<target name="testDummyvars" description="Build, run and plot testDummyvars (Tests impact of dummy variables)" depends="buildtestDummyvars2,graphtestDummyvars2,runtestDummyvars2,plottestDummyvars2,buildtestDummyvars1,graphtestDummyvars1,runtestDummyvars1,plottestDummyvars1"/>
<target name="test01" description="Build, run and plot tests 01" depends="buildtest01,graphtest01,runtest01,plottest01"/>
<target name="test02" description="Build, run and plot tests 02" depends="buildtest02,graphtest02,runtest02,plottest02"/>
<target name="test03" description="Build, run and plot tests 03" depends="buildtest03,graphtest03,runtest03,plottest03"/>
<target name="test04" description="Build, run and plot tests 04" depends="buildtest04,graphtest04,runtest04,plottest04"/>
<target name="test05" description="Build, run and plot tests 05" depends="buildtest05,graphtest05,runtest05,plottest05"/>

<!-- Clean -->
<target name="clean" description="Delete all build files">
	<delete includeemptydirs="true">
		<fileset dir="${results.dir}" includes="**/build/**"/>
	</delete>
</target>

<!-- Clean -->
<target name="cleanall" description="Delete all build and results files">
	<delete dir="${results.dir}"/>
</target>

<!-- Check for build dependencies -->
<target name="buildDependencies" unless="checked.buildDependencies">
	<available file="${jack.dep}" property="jack.available"/>
	<fail message="JACK installation not found at ${jack.dep}. See README for installation instructions." unless="jack.available"/>
	<available file="${weka.dep}" property="weka.available"/>
	<fail message="WEKA installation not found at ${weka.dep}. See README for installation instructions." unless="weka.available"/>
	<condition property="available.buildDependencies">
		<and>
			<isset property="jack.available"/>
			<isset property="weka.available"/>
		</and>
	</condition>
	<property name="checked.buildDependencies" value="true"/>
</target>

<!-- Check for GNUPlot -->
<target name="plotDependencies" unless="checked.plotDependencies">
	<exec executable="${gnuplot.dep}" searchpath="true" failifexecutionfails="false" resultproperty="available.plotDependencies">
		<arg value="-V"/>
	</exec>
	<property name="checked.plotDependencies" value="true"/>
</target>

<!-- Check for Graphviz -->
<target name="graphDependencies" unless="checked.graphDependencies">
	<exec executable="${dot.dep}" searchpath="true" failifexecutionfails="false" resultproperty="available.dot">
		<arg value="-V"/>
	</exec>
	<exec executable="${ps2pdf.dep}" searchpath="true" failifexecutionfails="false" resultproperty="available.ps2pdf"/>
	<condition property="available.graphDependencies">
		<and>
			<isset property="available.dot"/>
			<isset property="available.ps2pdf"/>
		</and>
	</condition>
	<property name="checked.graphDependencies" value="true"/>
</target>

<!-- Macro to fail if a test build is not found -->
<macrodef name="failIfBuildNotFound">
  <attribute name="test.name"/>
  <sequential>
    <fail message="Build not found: ${results.dir}/@{test.name}/${build.dir}/@{test.name}.jar">
	  <condition>
	    <not>
		  <available file="${results.dir}/@{test.name}/${build.dir}/@{test.name}.jar"/>
		</not>
	  </condition>
	</fail>
  </sequential>
</macrodef>

<!-- Macro to fail if test results not found -->
<macrodef name="failIfResultsNotFound">
  <attribute name="test.name"/>
  <sequential>
    <fail message="Results not found: ${results.all.dir}/@{test.name}**.csv">
	  <condition>
		<resourcecount when="less" count="1">
		  <fileset dir="${results.all.dir}" includes="@{test.name}**.csv"/>
		</resourcecount>
	  </condition>
	</fail>
  </sequential>
</macrodef>

<!-- Macro to build a test sub-tree structure -->
<macrodef name="makeTestTree">
  <attribute name="make.dir"/>
  <sequential>
	<mkdir dir="@{make.dir}/${build.classes.agents.dir}"/>
	<mkdir dir="@{make.dir}/${build.classes.events.dir}"/>
	<mkdir dir="@{make.dir}/${build.classes.plans.dir}"/>
	<mkdir dir="@{make.dir}/${build.sources.agents.dir}"/>
	<mkdir dir="@{make.dir}/${build.sources.events.dir}"/>
	<mkdir dir="@{make.dir}/${build.sources.plans.dir}"/>
  </sequential>
</macrodef>

<!-- Macro to generate JACK sources -->
<macrodef name="generateJACK">
  <attribute name="make.dir"/>
  <attribute name="specs.file"/>
  <sequential>
	<java fork="yes" classname="expGenerator.ExpGenerator" failonerror="true">
		<arg line="-i @{specs.file}  -o @{make.dir}/${build.sources.dir}"/>
		<classpath>
			<pathelement location="${blak.dep}"/>
			<pathelement location="${jack.dep}"/>
			<pathelement location="${weka.dep}"/>
		</classpath>
	</java>
  </sequential>
</macrodef>

<!-- Marco to compile JACK sources -->
<macrodef name="compileJACK">
  <attribute name="make.dir"/>
  <sequential>
	<java fork="yes" maxmemory="1g" classname="aos.main.JackBuild" failonerror="true">
		<arg line="-cp ${jack.dep}:${weka.dep}:${blak.dep} -wd @{make.dir}/${build.sources.dir} -r -DJAVACARGS=-g"/>
		<classpath>
			<pathelement location="${blak.dep}"/>
			<pathelement location="${jack.dep}"/>
			<pathelement location="${weka.dep}"/>
		</classpath>
	</java>
  </sequential>
</macrodef>

<!-- Macro to build test JAR -->
<macrodef name="makeJAR">
  <attribute name="test.name"/>
  <attribute name="make.dir"/>
  <sequential>
	<jar destfile="@{make.dir}/${build.dir}/@{test.name}.jar" basedir="@{make.dir}/${build.dir}" includes="agents/*.class trees/*.class events/*.class plans/*.class"/>
  </sequential>
</macrodef>

<!-- Macro to build the specified test -->
<macrodef name="buildTest">
  <attribute name="test.name"/>
  <attribute name="specs.file"/>
  <sequential>
	<makeTestTree make.dir="${results.dir}/@{test.name}"/>
	<generateJACK make.dir="${results.dir}/@{test.name}" specs.file="@{specs.file}"/>
	<compileJACK make.dir="${results.dir}/@{test.name}"/>
	<makeJAR test.name="@{test.name}" make.dir="${results.dir}/@{test.name}"/>
  </sequential>
</macrodef>

<!-- Macro to delete all build files for a specified test -->
<macrodef name="cleanTest">
  <attribute name="test.name"/>
  <sequential>
	<delete dir="${results.dir}/@{test.name}/${build.dir}"/>
  </sequential>
</macrodef>

<!-- Macro to draw the input tree -->
<macrodef name="graphInput">
  <attribute name="test.name"/>
  <sequential>
	<exec executable="dot" failonerror="true">
		<arg value="-Tps"/>
		<arg value="-o"/>
		<arg value="${results.dir}/@{test.name}/${build.dir}/graphviz/@{test.name}.gptree.ps"/>
		<arg value="${results.dir}/@{test.name}/${build.dir}/graphviz/gptree.dot"/>
	</exec>
	<exec executable="ps2pdf" failonerror="true">
		<arg value="-sPAPERSIZE=a4"/>
		<arg value="-dPDFSETTINGS=/printer"/>
		<arg value="-dCompatibilityLevel=1.4"/>
		<arg value="-dMaxSubsetPct=0"/>
		<arg value="-dSubsetFonts=false"/>
		<arg value="-dEmbedAllFonts=true"/>
		<arg value="${results.dir}/@{test.name}/${build.dir}/graphviz/@{test.name}.gptree.ps"/>
		<arg value="${results.dir}/@{test.name}/${build.dir}/graphviz/@{test.name}.gptree.pdf"/>
	</exec>
  </sequential>
</macrodef>

<!-- Macro to run a test -->
<macrodef name="runTest">
  <attribute name="test.name"/>
  <attribute name="run.type"/>
  <attribute name="run.id" default="1"/>
  <attribute name="run.params"/>
  <sequential>
	<mkdir dir="${results.dir}/@{test.name}/@{run.type}@{run.id}"/>
	<tstamp prefix="start.@{test.name}-@{run.type}-@{run.id}"/>
	<echo level="info" message="${start.@{test.name}-@{run.type}-@{run.id}.DSTAMP}.${start.@{test.name}-@{run.type}-@{run.id}.TSTAMP}: Started @{test.name}/@{run.type}@{run.id}"/>
	<java fork="yes"  maxmemory="1g" classname="agents.Environment" failonerror="true" output="${results.dir}/@{test.name}/@{run.type}@{run.id}/stdout.log">
		<arg line="-d ${results.dir}/@{test.name}/@{run.type}@{run.id} -o @{test.name}-@{run.type}-@{run.id}.csv -u @{run.type} @{run.params}"/>
		<classpath>
			<pathelement location="${jack.dep}"/>
			<pathelement location="${weka.dep}"/>
			<pathelement location="${blak.dep}"/>
			<pathelement location="${results.dir}/@{test.name}/${build.dir}/@{test.name}.jar"/>
		</classpath>
	</java>
	<mkdir dir="${results.all.dir}"/>
	<copy file="${results.dir}/@{test.name}/@{run.type}@{run.id}/@{test.name}-@{run.type}-@{run.id}.csv" todir="${results.all.dir}" flatten="true"/>
  </sequential>
</macrodef>

<!-- Macro to run a test N times -->
<macrodef name="runTestRepeats">
  <attribute name="test.name"/>
  <attribute name="run.type"/>
  <attribute name="run.params"/>
  <sequential>
	<runTest test.name="@{test.name}" run.type="@{run.type}" run.id="1" run.params="@{run.params}"/>
	<runTest test.name="@{test.name}" run.type="@{run.type}" run.id="2" run.params="@{run.params}"/>
	<runTest test.name="@{test.name}" run.type="@{run.type}" run.id="3" run.params="@{run.params}"/>
	<runTest test.name="@{test.name}" run.type="@{run.type}" run.id="4" run.params="@{run.params}"/>
	<runTest test.name="@{test.name}" run.type="@{run.type}" run.id="5" run.params="@{run.params}"/>
  </sequential>
</macrodef>

<!-- Generic target to plot results of an experiment -->
<macrodef name="plotResult">
  <attribute name="test.name"/>
  <attribute name="range" default="[:]"/>
  <attribute name="every" default="1"/>
  <attribute name="window" default="100"/>
  <attribute name="label" default="@{test.name}"/>
  <sequential>
	<exec executable="${plot.sh}">
		<arg value="-t"/>
		<arg value="@{test.name}"/>
		<arg value="-d"/>
		<arg value="${results.all.dir}"/>
		<arg value="-o"/>
		<arg value="${results.all.dir}/@{test.name}.pdf"/>
		<arg value="-r"/>
		<arg value="@{range}"/>
		<arg value="-e"/>
		<arg value="@{every}"/>
		<arg value="-w"/>
		<arg value="@{window}"/>
		<arg value="-l"/>
		<arg value="@{label}"/>
	</exec>
  </sequential>
</macrodef>


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!-- BEGIN TESTS (Add new tests targets here) ~~~~~~~~~~~~~~~~~~~~-->
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!-- TEST 01 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<target name="buildtest01" description="Build test01" if="available.buildDependencies" depends="buildDependencies">
	<cleanTest test.name="test01"/>
	<buildTest test.name="test01" specs.file="${specs.dir}/concurrentFail.txt"/>
</target>
<target name="graphtest01" description="Graph test01" if="available.graphDependencies" depends="graphDependencies">
	<graphInput test.name="test01"/>
</target>
<target name="runtest01" description="Run test01">
    <failIfBuildNotFound test.name="test01"/>
	<runTestRepeats test.name="test01" run.type="stable"     run.params="-n 0.1 -i 2500 -s probabilistic -m 1 -k 3 -e 0.3"/>
	<runTestRepeats test.name="test01" run.type="concurrent" run.params="-n 0.1 -i 2500 -s probabilistic -m 1"/>
</target>
<target name="plottest01" description="Plot test01" if="available.plotDependencies" depends="plotDependencies">
    <failIfResultsNotFound test.name="test01"/>
	<plotResult test.name="test01" range="[:2500]" label="test01:n=0.1,m=1,k=3,e=0.3:concurrentFail.txt"/>
</target>


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!-- TEST 02 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<target name="buildtest02" description="Build test02" if="available.buildDependencies" depends="buildDependencies">
	<cleanTest test.name="test02"/>
	<buildTest test.name="test02" specs.file="${specs.dir}/concurrentFailDepth3Easier.txt"/>
</target>
<target name="graphtest02" description="Graph test02" if="available.graphDependencies" depends="graphDependencies">
	<graphInput test.name="test02"/>
</target>
<target name="runtest02" description="Run test02">
    <failIfBuildNotFound test.name="test02"/>
	<runTestRepeats test.name="test02" run.type="stable"     run.params="-n 0.1 -i 8000 -s probabilistic -m 1 -k 3 -e 0.3"/>
	<runTestRepeats test.name="test02" run.type="concurrent" run.params="-n 0.1 -i 8000 -s probabilistic -m 1"/>
</target>
<target name="plottest02" description="Plot test02" if="available.plotDependencies" depends="plotDependencies">
    <failIfResultsNotFound test.name="test02"/>
	<plotResult test.name="test02" range="[:8000]" label="test02:n=0.1,m=1,k=3,e=0.3:concurrentFailDepth3Easier.txt"/>
</target>


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!-- TEST 03 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<target name="buildtest03" description="Build test03" if="available.buildDependencies" depends="buildDependencies">
	<cleanTest test.name="test03"/>
	<buildTest test.name="test03" specs.file="${specs.dir}/concurrentFailDepth3Easier-balanced17.txt"/>
</target>
<target name="graphtest03" description="Graph test03" if="available.graphDependencies" depends="graphDependencies">
	<graphInput test.name="test03"/>
</target>
<target name="runtest03" description="Run test03">
    <failIfBuildNotFound test.name="test03"/>
	<runTestRepeats test.name="test03" run.type="stable"     run.params="-n 0.1 -i 2000 -s probabilistic -m 1 -k 3 -e 0.3"/>
	<runTestRepeats test.name="test03" run.type="concurrent" run.params="-n 0.1 -i 2000 -s probabilistic -m 1"/>
</target>
<target name="plottest03" description="Plot test03" if="available.plotDependencies" depends="plotDependencies">
    <failIfResultsNotFound test.name="test03"/>
	<plotResult test.name="test03" range="[:2000]" label="test03:n=0.1,m=1,k=3,e=0.3:concurrentFailDepth3Easier-balanced17.txt"/>
</target>


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!-- TEST 04 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<target name="buildtest04" description="Build test04" if="available.buildDependencies" depends="buildDependencies">
	<cleanTest test.name="test04"/>
	<buildTest test.name="test04" specs.file="${specs.dir}/concurrentFailDepth3Easier-balanced20.txt"/>
</target>
<target name="graphtest04" description="Graph test04" if="available.graphDependencies" depends="graphDependencies">
	<graphInput test.name="test04"/>
</target>
<target name="runtest04" description="Run test04">
    <failIfBuildNotFound test.name="test04"/>
	<runTestRepeats test.name="test04" run.type="stable"     run.params="-n 0.1 -i 3000 -s probabilistic -m 1 -k 3 -e 0.3"/>
	<runTestRepeats test.name="test04" run.type="concurrent" run.params="-n 0.1 -i 3000 -s probabilistic -m 1"/>
</target>
<target name="plottest04" description="Plot test04" if="available.plotDependencies" depends="plotDependencies">
    <failIfResultsNotFound test.name="test04"/>
	<plotResult test.name="test04" range="[:3000]" label="test04:n=0.1,m=1,k=3,e=0.3:concurrentFailDepth3Easier-balanced20.txt"/>
</target>


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!-- TEST 05 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<target name="buildtest05" description="Build test05" if="available.buildDependencies" depends="buildDependencies">
	<cleanTest test.name="test05"/>
	<buildTest test.name="test05" specs.file="${specs.dir}/concurrentFailDepth4-t15.txt"/>
</target>
<target name="graphtest05" description="Graph test05" if="available.graphDependencies" depends="graphDependencies">
	<graphInput test.name="test05"/>
</target>
<target name="runtest05" description="Run test05">
    <failIfBuildNotFound test.name="test05"/>
	<runTestRepeats test.name="test05" run.type="stable"     run.params="-n 0.1 -i 10000 -s probabilistic -m 1 -k 3 -e 0.3"/>
	<runTestRepeats test.name="test05" run.type="concurrent" run.params="-n 0.1 -i 10000 -s probabilistic -m 1"/>
</target>
<target name="plottest05" description="Plot test05" if="available.plotDependencies" depends="plotDependencies">
    <failIfResultsNotFound test.name="test05"/>
	<plotResult test.name="test05" range="[:10000]" label="test05:n=0.1,m=1,k=3,e=0.3:concurrentFailDepth4-t15.txt"/>
</target>


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!-- TEST ecai ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<target name="buildtestEcai" description="Build testEcai" if="available.buildDependencies" depends="buildDependencies">
	<cleanTest test.name="testEcai"/>
	<buildTest test.name="testEcai" specs.file="${specs.dir}/ecai/ecai.txt"/>
</target>
<target name="graphtestEcai" description="Graph testEcai" if="available.graphDependencies" depends="graphDependencies">
	<graphInput test.name="testEcai"/>
</target>
<target name="runtestEcai" description="Run testEcai">
    <failIfBuildNotFound test.name="testEcai"/>
	<runTestRepeats test.name="testEcai" run.type="stable"     run.params="-n 0.1 -i 5000 -s probabilistic -m 1 -k 3 -e 0.3"/>
	<runTestRepeats test.name="testEcai" run.type="concurrent" run.params="-n 0.1 -i 5000 -s probabilistic -m 1"/>
</target>
<target name="plottestEcai" description="Plot testEcai" if="available.plotDependencies" depends="plotDependencies">
    <failIfResultsNotFound test.name="testEcai"/>
	<plotResult test.name="testEcai" label="testEcai:n=0.1,m=1,k=3,e=0.3:ecai.txt"/>
</target>


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!-- testDummyvars1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<target name="buildtestDummyvars1" description="Build testDummyvars1" if="available.buildDependencies" depends="buildDependencies">
	<cleanTest test.name="testDummyvars1"/>
	<buildTest test.name="testDummyvars1" specs.file="${specs.dir}/dummyvars/pass-atdepth3-withseq1-invars01of01-withp001.txt"/>
</target>
<target name="graphtestDummyvars1" description="Graph testDummyvars1" if="available.graphDependencies" depends="graphDependencies">
	<graphInput test.name="testDummyvars1"/>
</target>
<target name="runtestDummyvars1" description="Run testDummyvars1">
    <failIfBuildNotFound test.name="testDummyvars1"/>
	<runTestRepeats test.name="testDummyvars1" run.type="stable"      run.params="-n 0.1 -i 8000 -s probabilistic -m 1 -k 3 -e 0.3"/>
	<runTestRepeats test.name="testDummyvars1" run.type="concurrent"  run.params="-n 0.1 -i 8000 -s probabilistic -m 1"/>
</target>
<target name="plottestDummyvars1" description="Plot testDummyvars1" if="available.plotDependencies" depends="plotDependencies">
    <failIfResultsNotFound test.name="testDummyvars1"/>
	<plotResult test.name="testDummyvars1" label="testDummyvars1:n=0.1,m=1,k=3,e=0.3:pass-atdepth3-withseq1-invars01of01-withp001.txt"/>
</target>
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!-- testDummyvars2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<target name="buildtestDummyvars2" description="Build testDummyvars2" if="available.buildDependencies" depends="buildDependencies">
	<cleanTest test.name="testDummyvars2"/>
	<buildTest test.name="testDummyvars2" specs.file="${specs.dir}/dummyvars/pass-atdepth3-withseq1-invars20of20-withp001.txt"/>
</target>
<target name="graphtestDummyvars2" description="Graph testDummyvars2" if="available.graphDependencies" depends="graphDependencies">
	<graphInput test.name="testDummyvars2"/>
</target>
<target name="runtestDummyvars2" description="Run testDummyvars2">
    <failIfBuildNotFound test.name="testDummyvars2"/>
	<runTestRepeats test.name="testDummyvars2" run.type="stable"      run.params="-n 0.1 -i 8000 -s probabilistic -m 1 -k 3 -e 0.3"/>
	<runTestRepeats test.name="testDummyvars2" run.type="concurrent"  run.params="-n 0.1 -i 8000 -s probabilistic -m 1"/>
</target>
<target name="plottestDummyvars2" description="Plot testDummyvars2" if="available.plotDependencies" depends="plotDependencies">
    <failIfResultsNotFound test.name="testDummyvars2"/>
	<plotResult test.name="testDummyvars2" label="testDummyvars2:n=0.1,m=1,k=3,e=0.3:pass-atdepth3-withseq1-invars20of20-withp001.txt"/>
</target>


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!-- TEST testImpactvars1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<target name="buildtestImpactvars1" description="Build testImpactvars1" if="available.buildDependencies" depends="buildDependencies">
	<cleanTest test.name="testImpactvars1"/>
	<buildTest test.name="testImpactvars1" specs.file="${specs.dir}/impactvars/pass-atdepth3-withseq3-inworlds8of8-withp1by216.txt"/>
</target>
<target name="graphtestImpactvars1" description="Graph testImpactvars1" if="available.graphDependencies" depends="graphDependencies">
	<graphInput test.name="testImpactvars1"/>
</target>
<target name="runtestImpactvars1" description="Run testImpactvars1">
    <failIfBuildNotFound test.name="testImpactvars1"/>
	<runTestRepeats test.name="testImpactvars1" run.type="stable"      run.params="-n 0.1 -i 8000 -s probabilistic -m 1 -k 3 -e 0.3"/>
	<runTestRepeats test.name="testImpactvars1" run.type="concurrent"  run.params="-n 0.1 -i 8000 -s probabilistic -m 1"/>
</target>
<target name="plottestImpactvars1" description="Plot testImpactvars1" if="available.plotDependencies" depends="plotDependencies">
    <failIfResultsNotFound test.name="testImpactvars1"/>
	<plotResult test.name="testImpactvars1" label="testImpactvars1:n=0.1,m=1,k=3,e=0.3:pass-atdepth3-withseq3-inworlds8of8-withp1by216.txt"/>
</target>


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!-- END TESTS TARGETS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

</project>
