public static void main(String[] args)
{
    String filename = "outcomes.dat";
    String targetDir = ".";
    int staK;
    double staE;
    boolean feedMeTheWorld = false;
    String feedMeFileName = "";
    boolean recordMeTheWorld = false;
    String recordMeFileName = "";
    boolean doCompare = false;
    String compareTemplate = "";
    double noise;
    double threshold;
    double coverageWeightB;

    noise = 0.1;
    threshold = 0.0;
    coverageWeightB = 1.0;
    staK = 3;
    staE = 0.05;
    int minNI = 10;

    if (args.length > 0) {
        int index = 0;
        while (index < args.length) {
            String arg = args[index];
            index++;
            char option = arg.charAt(1);
            switch (option) {
            case 'u':
                String umode = args[index];
                index++;
                if (umode.equals("concurrent")) {
                    update_mode = UpdateMode.CONCURRENT;
	            System.out.println("ACL Learning");
                } else if (umode.equals("stable")) {
                    update_mode = UpdateMode.STABLE;
	            System.out.println("BUL Learning");
                }
                break;
            case 'i':
                numIterations = Integer.parseInt(args[index]);
                index++;
                break;
            case 'm':
                minNI = Integer.parseInt(args[index]);
                index++;
                break;
            case 'd':
                targetDir = args[index];
                index++;
                break;
            case 'o':
                filename = args[index];
                index++;
                break;
            case 'b':
                coverageWeightB = Double.parseDouble(args[index]);
                index++;
                break;
            case 't':
                threshold = Double.parseDouble(args[index]);
                index++;
                break;
            case 'n':
                noise = Double.parseDouble(args[index]);
                index++;
                break;
            case 's':
                String psmode = args[index];
                index++;
                if (psmode.equals("probabilistic")) {
                    plan_selection = PlanSelectMode.PROBABILISTIC;
	            System.out.println("Probabilistic Plan Selection");
                } else if (psmode.equals("coverage")) {
                    plan_selection = PlanSelectMode.COVERAGE;
	            System.out.println("Coverage-based Plan Selection");
		}
                break;
            case 'k':
                staK = Integer.parseInt(args[index]);
                index++;
                break;
            case 'e':
                staE = Double.parseDouble(args[index]);
                index++;
                break;
            case 'w':
                feedMeTheWorld = true;
                feedMeFileName = args[index];
                index++;
                break;
            case 'r':
                recordMeTheWorld = true;
                recordMeFileName = args[index];
                index++;
                break;
            case 'c':
                doCompare = true;
                compareTemplate = args[index];
                index++;
                break;

            }
        }

        RefinerAgent agent = new RefinerAgent("BDI-Learning Agent");
        agent.setUpdateMode(update_mode);
        if (update_mode == UpdateMode.STABLE) {
            agent.setStableK(staK);
            agent.setStableE(staE);
            System.out.println("K: " + staK + ", e: " + staE);
        }
        Environment env = new Environment("Environment", targetDir, filename);
        env.worldFed = feedMeTheWorld;
        env.fedFileName = feedMeFileName;
        env.recordWorldFeed = recordMeTheWorld;
        env.recordFeedFileName = recordMeFileName;
        env.compareToFile = doCompare;
        env.compareTemplate = compareTemplate;
        env.noise = noise;

        if (feedMeTheWorld) {
            env.openWorldFedConnection();
        }
        agent.setEnvironment(env);
        agent.minNumInstances = minNI;
        agent.planSelectThreshold = threshold;
	agent.coverageWeight = coverageWeightB;

        env.filenameOutcome = filename;
        env.learningAgent = agent;
        System.out.println("Start the simulation with " + env.numIterations +
                           " iterations \n min num instances to build a tree is set to " + agent.minNumInstances);

        agent.generateTree();
        env.runOneIteration();

    } else {
        System.out.println(" Run with no arguments. Please add some");
    }
}


/** Logger Interface **/

public void indentReset()
{
    logindent = "";
}

public void indentRight()
{
    logindent += " ";
}

public void indentLeft()
{
    int len = logindent.length();
    if (len >= 2) {
        logindent = logindent.substring(0, len - 2);
    } else {
        logindent = "";
    }
}

public void writeLog(String msg)
{
    try
    {
        log.println(logindent + msg);
        log.flush();
    }
    catch(Exception e) {
        System.out.println("Error: File could not be created.");
    }
}
/*************************/


public void openWorldFedConnection()
{
    try
    {
        br = new BufferedReader(new FileReader(fedFileName));
    }
    catch(Exception e) {
        System.out.println("br failed");
        System.exit(0);
    }
}


public void openCompareConnection()
{
    try
    {
        compareReader = new BufferedReader(new FileReader(compareTemplate));
        try
        {
            String thisLine = compareReader.readLine();
            while (thisLine != null) {
                thisLine = thisLine.trim();
                int planNodeIndex = learningAgent.findPlanNodeByID(thisLine);
                String msg = learningAgent.planNodes[planNodeIndex].getDT();
                thisLine = compareReader.readLine();
            }
        }
        catch(Exception e) {
            System.out.println("Compare file Line reading failed. failed");
            System.exit(0);
        }
    }
    catch(Exception e) {
        System.out.println("Compare file reading failed. failed");
        System.exit(0);
    }
}
