public static void main(String[] args)
{
    String filename = "outcomes.dat";
    String targetDir = ".";
    int staK;
    double staE;
    int staW;
    double noise;
    double threshold;
    double coverageWeightB;
    int stateW;
    double alpha;

    noise = 0.1;
    threshold = 0.0;
    coverageWeightB = 1.0;
    staK = 3;
    staE = 0.05;
    staW = 1;
    stateW = 0;
    alpha = 0.95;

    if (args.length > 0) {
        int index = 0;
        while (index < args.length) {
            String arg = args[index];
            index++;
            char option = arg.charAt(1);
            switch (option) {
            case 'a':
                alpha = Double.parseDouble(args[index]);
                index++;
                break;
            case 'b':
                coverageWeightB = Double.parseDouble(args[index]);
                index++;
                break;
            case 'd':
                targetDir = args[index];
                index++;
                break;
            case 'e':
                staE = Double.parseDouble(args[index]);
                index++;
                break;
            case 'i':
                numIterations = Integer.parseInt(args[index]);
                index++;
                break;
            case 'k':
                staK = Integer.parseInt(args[index]);
                index++;
                break;
            case 'n':
                noise = Double.parseDouble(args[index]);
                index++;
                break;
            case 'o':
                filename = args[index];
                index++;
                break;
            case 'p':
                String rmode = args[index];
                index++;
                if (rmode.equals("failure_recovery")) {
                    run_mode = RunMode.FAILURE_RECOVERY;
	            System.out.println("Failure Recovery mode is enabled");
                }
                break;
            case 's':
                String psmode = args[index];
                index++;
                if (psmode.equals("probabilistic")) {
                    plan_selection = PlanSelectMode.PROBABILISTIC;
	            System.out.println("Probabilistic Plan Selection");
                } else if (psmode.equals("coverage")) {
                    plan_selection = PlanSelectMode.COVERAGE;
	            System.out.println("Coverage-based Plan Selection");
                } else if (psmode.equals("confidence")) {
                    plan_selection = PlanSelectMode.CONFIDENCE;
	            System.out.println("Confidence-based Plan Selection");
		}
                break;
            case 't':
                threshold = Double.parseDouble(args[index]);
                index++;
                break;
            case 'u':
                String umode = args[index];
                index++;
                if (umode.equals("concurrent")) {
                    update_mode = UpdateMode.CONCURRENT;
	            System.out.println("ACL Learning");
                } else if (umode.equals("stable")) {
                    update_mode = UpdateMode.STABLE;
	            System.out.println("BUL Learning");
                }
                break;
            case 'v':
                staW = Integer.parseInt(args[index]);
                index++;
                break;
            case 'w':
                stateW = Integer.parseInt(args[index]);
                index++;
                break;
            }
        }

        RefinerAgent agent = new RefinerAgent("BDI-Learning Agent");
        agent.setUpdateMode(update_mode);
        agent.setSelectMode(plan_selection);
        agent.setRunMode(run_mode);
	if (run_mode == RunMode.FAILURE_RECOVERY) {
	    agent.setTriggerNewIteration(false);
	} else {
	    agent.setTriggerNewIteration(true);
	}
        agent.setStableK(staK);
        agent.setStableE(staE);
        agent.setStableW(staW);
	agent.setStateHistoryWindow(stateW);
	agent.setConfidenceAlpha(alpha);
        System.out.println("K: " + staK + ", e: " + staE + ", w: " +staW+ ", a: "+alpha);
        Environment env = new Environment("Environment", targetDir, filename);
        env.noise = noise;

        agent.setEnvironment(env);
        agent.planSelectThreshold = threshold;
	agent.coverageWeight = coverageWeightB;
	

        env.filenameOutcome = filename;
        env.learningAgent = agent;
        System.out.println("Start the simulation with " + env.numIterations + "iterations.\n");

        agent.generateTree();
        env.runOneIteration();

    } else {
        System.out.println(" Run with no arguments. Please add some");
    }
}


/** Logger Interface **/

public void indentReset()
{
    logindent = "";
}

public void indentRight()
{
    logindent += " ";
}

public void indentLeft()
{
    int len = logindent.length();
    if (len >= 2) {
        logindent = logindent.substring(0, len - 2);
    } else {
        logindent = "";
    }
}

public void writeLog(String msg)
{
    try
    {
        log.println(logindent + msg);
        log.flush();
    }
    catch(Exception e) {
        System.out.println("Error: File could not be created.");
    }
}
/*************************/
